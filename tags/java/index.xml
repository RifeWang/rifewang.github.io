<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - Tag - 凌虚 Blog</title><link>https://rifewang.github.io/tags/java/</link><description>Java - Tag - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Sun, 23 Apr 2023 15:17:18 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/tags/java/" rel="self" type="application/rss+xml"/><item><title>Java 应用程序在 Kubernetes 上棘手的内存管理</title><link>https://rifewang.github.io/k8s-memory-management-for-java-applications/</link><pubDate>Sun, 23 Apr 2023 15:17:18 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-memory-management-for-java-applications/</guid><description><![CDATA[<h2 id="引言">引言</h2>
<p>如何结合使用 JVM Heap 堆和 Kubernetes 内存的 requests 和 limits 并远离麻烦。</p>
<p>在容器环境中运行 Java 应用程序需要了解两者 —— JVM 内存机制和 Kubernetes 内存管理。这两个环境一起工作会产生一个稳定的应用程序，但是，错误配置最多可能导致基础设施超支，最坏情况下可能会导致应用程序不稳定或崩溃。我们将首先仔细研究 JVM 内存的工作原理，然后我们将转向 Kubernetes，最后，我们将把这两个概念放在一起。</p>]]></description></item></channel></rss>