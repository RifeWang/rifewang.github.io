<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - Tag - 凌虚 Blog</title><link>https://rifewang.github.io/tags/golang/</link><description>Golang - Tag - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Tue, 19 Dec 2023 10:37:48 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/tags/golang/" rel="self" type="application/rss+xml"/><item><title>Kubernetes CRD &amp; Operator 简介</title><link>https://rifewang.github.io/k8s-crd-operator/</link><pubDate>Tue, 19 Dec 2023 10:37:48 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-crd-operator/</guid><description>Kubernetes CRD 在 kubernetes 中有一系列内置的资源，诸如：pod、deployment、configmap、service …… 等等，它们由 k8s 的内部组件管理。而除了</description></item><item><title>Go Errors 错误处理</title><link>https://rifewang.github.io/errors/</link><pubDate>Fri, 18 Oct 2019 16:41:26 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/errors/</guid><description>Golang 中的 error 是一个内置的特殊的接口类型： 1 2 3 type error interface { Error() string } 在 Go 1.13 版本之前，有关 error 的方法只有两个： errors.New : 1 func New(text string) error fmt.Errorf : 1 func Errorf(format string, a ...interface{}) error 这两个方法都是</description></item><item><title>Go 垃圾回收</title><link>https://rifewang.github.io/gc/</link><pubDate>Wed, 25 Sep 2019 00:56:24 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/gc/</guid><description>Garbage Collection（ GC ）也就是垃圾回收到底是什么？内存空间是有限的，诸如变量等需要分配内存才能存储数据，而当这个变量不再使用的时候就需要</description></item><item><title>微服务互通的桥梁: gRPC 入门示例</title><link>https://rifewang.github.io/grpc/</link><pubDate>Fri, 23 Aug 2019 00:25:31 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/grpc/</guid><description>RPC 是什么？Remote Procedure Call ，远程过程调用，一种通信协议。你可以理解为，在某台机器上调用另外一台机器上的服务或方法。 应用服务对外可以提供 REST 接口</description></item><item><title>为什么你应该使用 Go module proxy</title><link>https://rifewang.github.io/why-use-go-module-proxy/</link><pubDate>Mon, 12 Aug 2019 00:45:03 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/why-use-go-module-proxy/</guid><description>自从 Go v1.11 版本之后 Go modules 成了官方的包管理方式，与此同时还有一个 Go module proxy ，它到底是个什么东西？顾名思义，其实就是个代理，所有的模块和依赖库都可以从这</description></item><item><title>Go 开发十种常犯错误【译】</title><link>https://rifewang.github.io/top-10-mistakes/</link><pubDate>Mon, 29 Jul 2019 00:11:03 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/top-10-mistakes/</guid><description>文本翻译自: https://itnext.io/the-top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65 本文将会介绍 Go 开发中十种最常犯的错误，内容不算少，请耐心观看。 1、未知的枚举值 示例： 1 2 3 4 5 6 7 type Status uint32 const ( StatusOpen Status = iota StatusClosed StatusUnknown ) 示例</description></item></channel></rss>