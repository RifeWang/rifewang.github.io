<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Kubernetes - Tag - 凌虚 Blog</title><link>https://rifewang.github.io/tags/kubernetes/</link><description>Kubernetes - Tag - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Sat, 15 Jun 2024 20:04:06 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/tags/kubernetes/" rel="self" type="application/rss+xml"/><item><title>Kubernetes scheduler 概述及自定义调度器</title><link>https://rifewang.github.io/k8s-custom-scheduler/</link><pubDate>Sat, 15 Jun 2024 20:04:06 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-custom-scheduler/</guid><description>kube-scheduler kube-scheduler 是 k8s 集群中控制平面的一个重要组件，其负责的工作简单且专一：给未分配的 pod 分配一个 node 节点。 调度器的大致工作过程可以分为以下几步： 监听到未绑定</description></item><item><title>Kubernetes Service 与 long-lived connections</title><link>https://rifewang.github.io/k8s-service-long-lived-connection/</link><pubDate>Wed, 12 Jun 2024 16:14:46 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-service-long-lived-connection/</guid><description>本文将会介绍： 从 pod 到 service 再到 pod，kubernetes 中的流量是怎么走的？ 对于 long-lived connection 长连接又是怎样的情况？ 从 pod 到 service 再到 pod 如上图所示： 1、我们先</description></item><item><title>我的 2024 年 CKA 认证两天速通攻略</title><link>https://rifewang.github.io/2024-cka-cert/</link><pubDate>Sat, 27 Jan 2024 23:23:16 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/2024-cka-cert/</guid><description>背景说明 如上图所示，本人于 2024 年 1 月 22 号晚上 11 点进行了 CKA 的认证考试，并以 95 分（满分100）顺利通过拿证。本文将会介绍我的 CKA 考试心得和速通攻略。</description></item><item><title>Kubernetes 外部 HTTP 请求到达 Pod 容器的全过程</title><link>https://rifewang.github.io/http-flow-to-container/</link><pubDate>Sat, 30 Dec 2023 16:38:11 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/http-flow-to-container/</guid><description>Kubernetes 集群外部的 HTTP/HTTPS 请求是如何达到 Pod 中的 container 的？ HTTP 请求流转过程概述 如上图所示，全过程大致为： 用户从 web/mobile/pc 等客户端发出 HTTP/HTTPS 请求。 由于应用服务通常是通过域名的</description></item><item><title>Kubernetes Lease 及分布式选主</title><link>https://rifewang.github.io/lease/</link><pubDate>Tue, 26 Dec 2023 11:42:30 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/lease/</guid><description>分布式选主 在分布式系统中，应用服务常常会通过多个节点（或实例）的方式来保证高可用。然而在某些场景下，有些数据或者任务无法被并行操作，此时就需</description></item><item><title>Kubernetes 从提交 deployment 到 pod 运行的全过程</title><link>https://rifewang.github.io/k8s-from-deploy-to-pod/</link><pubDate>Sat, 23 Dec 2023 18:26:15 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-from-deploy-to-pod/</guid><description>当用户向 Kubernetes 提交了一个创建 deployment 的请求后，Kubernetes 从接收请求直至创建对应的 pod 运行这整个过程中都发生了什么呢？ kubernetes 架构简述 在搞清楚从 deployment 提交</description></item><item><title>Kubernetes CRD &amp; Operator 简介</title><link>https://rifewang.github.io/k8s-crd-operator/</link><pubDate>Tue, 19 Dec 2023 10:37:48 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-crd-operator/</guid><description>Kubernetes CRD 在 kubernetes 中有一系列内置的资源，诸如：pod、deployment、configmap、service …… 等等，它们由 k8s 的内部组件管理。而除了</description></item><item><title>容器运行时的内部结构和最新趋势（2023）</title><link>https://rifewang.github.io/the-internals-and-the-latest-trends-of-container-runtimes/</link><pubDate>Tue, 11 Jul 2023 10:07:05 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/the-internals-and-the-latest-trends-of-container-runtimes/</guid><description>容器运行时的内部结构和最新趋势（2023） 原文为 Akihiro Suda 在日本京都大学做的在线讲座，完整的 PPT 可 点击此处下载 本文内容分为以下三个部分： 容器简介 容器</description></item><item><title>Java 应用程序在 Kubernetes 上棘手的内存管理</title><link>https://rifewang.github.io/k8s-memory-management-for-java-applications/</link><pubDate>Sun, 23 Apr 2023 15:17:18 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-memory-management-for-java-applications/</guid><description>引言 如何结合使用 JVM Heap 堆和 Kubernetes 内存的 requests 和 limits 并远离麻烦。 在容器环境中运行 Java 应用程序需要了解两者 —— JVM 内存机制和 Kubernetes 内存管理。这两个环境一起工作会产生</description></item><item><title>Kubernetes Admission Controller 简介 - 注入 sidacar 示例</title><link>https://rifewang.github.io/k8s-admission-controller-sidacar-example/</link><pubDate>Sun, 16 Apr 2023 14:22:36 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-admission-controller-sidacar-example/</guid><description>Admission Controller Kubernetes Admission Controller（准入控制器）是什么？ 如下图所示： 当我们向 k8s api-server 提交了请求之后，需要经过认证鉴权、mutation admissio</description></item></channel></rss>