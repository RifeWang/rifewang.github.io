<section id="nice" data-tool="markdown编辑器" style="font-size: 16px; color: black; padding: 25px 30px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: justify; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; margin-top: -10px;"><h1 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; font-size: 1.8em; color: #009688; margin: 1.2em auto; text-align: center; border-bottom: 1px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">容器运行时的内部结构和最新趋势（2023）</span><span class="suffix"></span></h1>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">原文为 Akihiro Suda 在日本京都大学做的在线讲座，完整的 PPT 可 <a href="https://github.com/AkihiroSuda/AkihiroSuda/raw/5d9f0b1cd9b8c37cb1951768a3bebdb08a3a469e/slides/2023/20230615%20%5BKyoto%20University%5D%20The%20internals%20and%20the%20latest%20trends%20of%20container%20runtimes.pdf" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">点击此处下载</a></p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">本文内容分为以下三个部分：</p>
<ol data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">容器简介</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">容器运行时的内部结构</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">容器运行时的最新趋势</section></li></ol>
<hr data-tool="markdown.com.cn编辑器" style="height: 1px; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black; margin: 20px 0;">
<h2 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; font-size: 22px; color: #009688; padding-left: 10px; margin: 1em auto; border-left: 3px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">1. 容器简介</span><span class="suffix"></span></h2>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">什么是容器？</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">容器是一组用于隔离文件系统、CPU 资源、内存资源、系统权限等的各种轻量级方法。容器在很多意义上类似于虚拟机，但它们比虚拟机更高效，而安全性则往往低于虚拟机。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*OVsYlSmH_L15vparu4VrWg.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">有趣的是，“<em style="font-style: italic; color: black;">容器</em>”目前还没有严格的定义。当虚拟机提供类似容器的接口时，例如，当它们实现 <a href="https://specs.opencontainers.org/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">OCI（开放容器）规范</a> 时，甚至虚拟机也可以被称为“<em style="font-style: italic; color: black;">容器</em>”。这种“非容器”的容器将在后面的第三部分中讨论。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://www.docker.com/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker</a> 是最流行的容器引擎。Docker 本身支持 Linux 容器和 Windows 容器，但 Windows 容器不在本次讨论的范围之内。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">启动 Docker 容器的典型命令行如下：</p>
<pre class="custom" data-tool="markdown.com.cn编辑器" style="margin-top: 10px; margin-bottom: 10px;"><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; background: #f8f8f8; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch;">docker&nbsp;run&nbsp;-p&nbsp;8080:80&nbsp;-v&nbsp;.:/usr/share/nginx/html&nbsp;nginx:1.25<br></code></pre>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">执行该命令后，可以在 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">http://&lt;the host’s IP&gt;:8080/</code> 中看到当前目录下 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">index.html</code> 的内容。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">命令中的 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">-p 8080:80</code> 部分指定将主机的 TCP 8080 端口转发到容器的 80 端口。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">命令中的 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">-v .:/usr/share/nginx/html</code> 部分指定将主机上的当前目录挂载到容器中的 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/usr/share/nginx/html</code>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">命令中的 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">nginx:1.25</code> 指定使用 <a href="https://hub.docker.com/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker Hub</a> 上的 <a href="https://hub.docker.com/_/nginx" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">官方 nginx 镜像</a>。Docker 镜像与虚拟机镜像有些相似，但是它们通常不包含额外的诸如 systemd 和 sshd 等守护进程。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">您也可以在 <a href="https://hub.docker.com/search" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker Hub</a> 上找到其他应用程序的官方镜像。您还可以使用称为 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">Dockerfile</code> 的语言自行构建自己的镜像：</p>
<pre class="custom" data-tool="markdown.com.cn编辑器" style="margin-top: 10px; margin-bottom: 10px;"><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; background: #f8f8f8; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch;"><span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">FROM</span>&nbsp;debian:<span class="hljs-number" style="color: #008080; line-height: 26px;">12</span><br><span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">RUN</span><span class="bash" style="line-height: 26px;">&nbsp;&nbsp;apt-get&nbsp;update&nbsp;&amp;&amp;&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;openjdk-17-jre</span><br><span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">COPY</span><span class="bash" style="line-height: 26px;">&nbsp;myapp.jar&nbsp;/myapp.jar</span><br><span class="hljs-keyword" style="color: #333; font-weight: bold; line-height: 26px;">CMD</span><span class="bash" style="line-height: 26px;">&nbsp;&nbsp;[<span class="hljs-string" style="color: #d14; line-height: 26px;">"java"</span>,&nbsp;<span class="hljs-string" style="color: #d14; line-height: 26px;">"-jar"</span>,&nbsp;<span class="hljs-string" style="color: #d14; line-height: 26px;">"/myapp.jar"</span>]</span><br></code></pre>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">可以使用 <a href="https://docs.docker.com/engine/reference/commandline/build/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">docker build</a> 命令构建镜像，并使用 <a href="https://docs.docker.com/engine/reference/commandline/push/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">docker push</a> 命令将其推送到 Docker Hub 或其它镜像仓库。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Kubernetes</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://kubernetes.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Kubernetes</a> 将多个容器主机（例如（但不限于）Docker 主机）集群化，以提供负载平衡和容错功能。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*An2qZhoR6_OGaz7Z4mG8Zg.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">值得注意的是，Kubernetes 也是一个抽象框架，用于与 <a href="https://kubernetes.io/docs/concepts/workloads/pods/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Pods</a>（始终在同一主机上共同调度的容器组）、<a href="https://kubernetes.io/docs/concepts/services-networking/service/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Services</a>（网络连接实体）和 <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">其它类型的对象</a> 进行交互，但是本次演讲不会深入介绍 kubernetes。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker 与 Docker 之前的容器</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">虽然容器直到 2013 年 Docker 发布才受到太多关注，但 Docker 并不是第一个容器平台：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">1999</strong>：<a href="https://svnweb.freebsd.org/base?view=revision&amp;revision=46155" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">FreeBSD Jail</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2000</strong>：<a href="https://lkml.iu.edu/hypermail/linux/kernel/0008.2/0042.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Linux 虚拟环境系统（Virtuozzo 和 OpenVZ 的前身）</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2001</strong>：<a href="https://www.cs.helsinki.fi/linux/linux-kernel/2001-40/1065.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Linux Vserver</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2002</strong>：<a href="https://wiki.openvz.org/History" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Virtuozzo</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2004</strong>：<a href="https://lkml.iu.edu/hypermail/linux/kernel/0409.1/0994.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">BSD Jail for Linux</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2004</strong>：<a href="https://web.archive.org/web/20041116174148/http://www.sun.com/smi/Press/sunflash/2004-11/sunflash.20041115.2.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Solaris Containers（显然，“容器”这个词就是这次创造的）</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2005</strong>：<a href="https://wiki.openvz.org/History" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">OpenVZ</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2008</strong>：<a href="https://github.com/lxc/lxc/tree/5e97c3fcce787a5bc0f8ceef43aa3e05195b480a" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">LXC</a></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2013</strong>：<a href="https://www.youtube.com/watch?v=9xciauwbsuo" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker</a></section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">人们普遍认为 FreeBSD Jail（大约 1999 年）是类 Unix 操作系统的第一个实用容器实现，尽管“容器”这个术语并不是在那时创造的。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">从那时起，Linux 上也出现了几种实现。然而，Docker 之前的容器与 Docker 容器有本质上的不同。前者专注于模仿整个机器，其中包含 System V init、sshd、syslogd 等。当时经常将 Web 服务器、应用服务器、数据库服务器和所有内容放入一个容器中。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Docker 改变了整个范式。就 Docker 而言，一个容器通常只包含一个服务，因此容器可以是无状态且不可变的。这种设计显着降低了维护成本，因为容器现在是一次性的；当需要更新某些内容时，您只需删除容器并从最新镜像重新创建它即可。您也不再需要在容器内安装 sshd 和其他实用程序，因为您永远不需要对其进行 shell 访问。这也简化了多主机集群的负载平衡和容错。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*Xzpc72NV3fxpZfDrUfCHCA.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<hr data-tool="markdown.com.cn编辑器" style="height: 1px; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black; margin: 20px 0;">
<h2 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; font-size: 22px; color: #009688; padding-left: 10px; margin: 1em auto; border-left: 3px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">2. 容器运行时的内部结构</span><span class="suffix"></span></h2>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">本节假设使用 Docker v24 及其默认配置，但大多数部分也适用于非 Docker 容器。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker 底层</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Docker 由客户端程序（<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">docker</code> CLI）和守护进程（<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">dockerd</code>）组成。<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">docker</code> CLI 通过 Unix 套接字 (<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/var/run/docker.sock</code>) 连接到 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">dockerd</code> 守护进程来创建容器。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">然而，<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">dockerd</code> 守护进程本身并不创建容器，它将控制权委托给 <a href="https://containerd.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">containerd</code></a> 守护进程来创建容器。但 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">containerd</code> 也不创建容器，而是进一步将控制权委托给 <a href="https://github.com/opencontainers/runc" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">runc</code></a> 运行时，它包含了多个 Linux 内核功能，例如 Namespaces、Cgroups 和 Capabilities，以实现“<em style="font-style: italic; color: black;">容器</em>”的概念。Linux 内核中并没有“<em style="font-style: italic; color: black;">容器</em>”对象。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*RWzcHdOheUfu_cdEwCRRmQ.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Namespace 命名空间</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man7/namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Namespace 命名空间</a> 将资源与主机和其他容器隔离。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">最知名的命名空间是 <a href="https://man7.org/linux/man-pages/man7/mount_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">mount namespace</a>。Mount 命名空间隔离文件系统视图，以便容器可以使用 <a href="https://man7.org/linux/man-pages/man2/pivot_root.2.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">pivot_root(2)</code></a> 系统调用将 rootfs 更改为 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/var/lib/docker/.../&lt;container's rootfs&gt;</code>。该系统调用类似于传统的 <a href="https://man7.org/linux/man-pages/man2/chroot.2.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">chroot(2)</code></a> 但 <a href="https://tbhaxor.com/pivot-root-vs-chroot-for-containers/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">更安全</a>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">容器的 rootfs 与主机的结构非常相似，但它对 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/proc</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/sys</code> 和 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev</code> 有一些限制。例如，</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/proc/sys</code> 目录被重新挂载为只读绑定以禁止 sysctl。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">通过挂载 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/null</code> 来屏蔽  <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/proc/kcore</code> 文件（RAM）。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">通过挂载空的只读 tmpfs 来屏蔽 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/sys/firmware</code> 目录（固件数据）。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">对 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev</code> 目录的访问受到 Cgroup 的限制（稍后讨论）。</section></li></ul>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*T-hPJqFAR6UIZ-yDHETOMQ.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man7/network_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Network namespace</a> 允许为容器分配专用 IP 地址，以便它们可以通过 IP 相互通信。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*fDuES0pJVmlZ-JLDNM1gSw.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man7/pid_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">PID namespace</a> 隔离进程树，以便容器无法控制其外部的进程。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*ZZdXqUyVmpRb1ZK9yk8OBQ.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man7/user_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">User namespace</a>（不要与<a href="https://en.wikipedia.org/wiki/User_space_and_kernel_space" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">用户空间</a> 混淆）通过将主机上的非 root 用户映射到容器中的伪 root 来隔离 root 权限。伪 root 可以像容器中的root 一样运行 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">apt-get</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">dnf</code> 等，但它没有对容器外部资源的特权访问。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">用户命名空间显着减轻了潜在的容器突破攻击，但 <a href="https://docs.docker.com/engine/security/userns-remap/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker 中默认不使用它</a>。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*yUzEpHCWi-vw1suk5ncFaw.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">其他命名空间：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://man7.org/linux/man-pages/man7/ipc_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">IPC命名空间</strong></a>：隔离 System V 进程间通信对象等。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://man7.org/linux/man-pages/man7/uts_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">UTS 命名空间</strong></a>：隔离主机名。"UTS"（Unix Time Sharing system）似乎对这个命名空间来说是个用词不当的称呼。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://man7.org/linux/man-pages/man7/uts_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">（可选）Cgroup 命名空间</strong></a>：隔离 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/sys/fs/cgroup</code> 层次结构。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://man7.org/linux/man-pages/man7/time_namespaces.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">（可选）Time 命名空间</strong></a>：隔离时钟。<a href="https://github.com/opencontainers/runtime-spec/pull/1151" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">大多数容器尚未使用</a>。</section></li></ul>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Cgroups</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man7/cgroups.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Cgroups</a>（控制组）施加多种资源配额，例如 CPU 使用率、内存使用率、block I/O 以及容器中的进程数量。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Cgroup 还控制对设备节点的访问。<a href="https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#default-devices" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker默认配置</a> 允许无限制访问 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/null</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/zero</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/urandom</code> 等，不允许访问 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/sda</code>（磁盘设备）、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/dev/mem</code>（内存）等。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Capabilities</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">在 Linux 上，root 权限由 <a href="https://man7.org/linux/man-pages/man7/capabilities.7.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">64-bit capability</a> 标记。目前使用了 <a href="https://github.com/torvalds/linux/blob/v6.3/include/uapi/linux/capability.h#L420" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">41 位</a>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Docker 的默认配置删除了系统范围的管理功能，例如 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">CAP_SYS_ADMIN</code>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://github.com/moby/moby/blob/v24.0.2/oci/caps/defaults.go" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">保留的能力</a>包括：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">CAP_CHOWN</code>：用于在容器内运行 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">chown</code>。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">CAP_NET_BIND_SERVICE</code>：用于绑定容器内 1024 以下的 TCP 和 UDP 端口。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">CAP_NET_RAW</code>：用于运行需要制作原始以太网数据包的<a href="https://github.com/moby/moby/issues/41886#issuecomment-1590736893" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">旧版 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">ping</code> 实现</a>。这种功能非常危险，因为它允许在容器网络中进行<a href="https://blog.aquasec.com/dns-spoofing-kubernetes-clusters" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">ARP 欺骗和 DNS 欺骗</a>。Docker 的未来版本可能会<a href="https://github.com/moby/moby/issues/41886" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">默认禁用它</a>。</section></li></ul>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">（可选）Seccomp</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://man7.org/linux/man-pages/man2/seccomp.2.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Seccomp</a>（安全计算）允许指定系统调用的显式允许列表（或拒绝列表）。Docker 的默认配置允许大约 <a href="https://github.com/moby/moby/blob/v24.0.2/profiles/seccomp/default.json" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">350 个系统调用</a>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Seccomp 用于<a href="https://en.wikipedia.org/wiki/Defense_in_depth_(computing)" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><em style="font-style: italic; color: black;">纵深防御</em></a>；对于容器来说这并不是硬性要求。为了向后兼容，Kubernetes 仍然默认不使用 seccomp，并且<a href="https://github.com/kubernetes/enhancements/issues/2413#issuecomment-1581231097" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">在可预见的将来可能永远不会改变默认配置</a>。用户仍然可以通过 <a href="https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/#kubelet-config-k8s-io-v1beta1-KubeletConfiguration" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">KubeletConfiguration</a> 选择启用 seccomp 。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">（可选）AppArmor 或 SELinux</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://apparmor.net/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">AppArmor</a> 和 <a href="https://github.com/SELinuxProject" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">SELinux</a>（安全增强型 Linux）是 <a href="https://www.kernel.org/doc/html/v6.3/admin-guide/LSM/index.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">LSM</a>（Linux 安全模块），可提供更细粒度的配置旋钮。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">这些是相互排斥的；由主机操作系统发行商（而不是容器镜像发行商）选择：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">AppArmor</strong>：Debian、Ubuntu、SUSE 等选择的。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">SELinux</strong>：由 Fedora、Red Hat Enterprise Linux 和类似的主机操作系统发行版选择。</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">为了进行纵深防御，Docker 的 <a href="https://github.com/moby/moby/blob/v24.0.2/profiles/apparmor/template.go" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">默认 AppArmor 配置文件</a> 几乎与其功能、挂载掩码等默认配置重叠。用户可以添加自定义设置以提高安全性。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">但 SELinux 的情况则不同。要在 <a href="https://docs.docker.com/engine/reference/commandline/dockerd/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">selinux-enabled</a> 模式下运行容器，您必须在绑定挂载上附加选项 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">:z</code>（小写字符）或 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">:Z</code>（大写字符），或者自己运行复杂的 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">chcon</code> 命令避免权限错误。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">:z</code>（小写字符）选项用于类型强制。类型强制通过为进程和文件分配“类型”来保护主机文件免受容器的影响。以 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">container_t</code> 类型运行的进程可以读取 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">container_share_t</code> 类型的文件，并读/写 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">container_file_t</code> 类型的文件，但无法访问其他类型的文件。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*KoTwjHe3dUEYQRzfOl_Q2A.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">:Z</code>（大写字符）选项用于多类别安全性。多类别安全性通过为进程和文件分配类别号来保护一个容器免受另一个容器的影响。例如，类别 42 的进程无法访问标记为类别 43 的文件。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*bQoe2Cca_wWLXrYBlj_t1w.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">适用于 Mac/Win 的 Docker</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://www.docker.com/products/docker-desktop/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker Desktop</a> 产品支持在 Mac 和 Windows 上运行 Linux 容器，但它们只是在底层运行 Linux 虚拟机来在其上运行容器。这些容器不直接在 macOS 和 Windows 上运行。</p>
<hr data-tool="markdown.com.cn编辑器" style="height: 1px; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black; margin: 20px 0;">
<h2 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; font-size: 22px; color: #009688; padding-left: 10px; margin: 1em auto; border-left: 3px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">3.容器运行时的最新趋势</span><span class="suffix"></span></h2>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker 的替代品（作为 Kubernetes 运行时）</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Kubernetes 的第一个版本（2014 年）是专门为 Docker 制作的。Kubernetes <a href="https://kubernetes.io/blog/2016/07/kubernetes-1-3-bridging-cloud-native-and-enterprise-workloads/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.3</a> (2016) 添加了对名为 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">rkt</code> 的替代容器运行时的临时支持，但 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">rkt</code> 已于<a href="https://www.cncf.io/blog/2019/08/16/cncf-archives-the-rkt-project/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">2019 年</a>退役。支持替代容器运行时的努力在 Kubernetes <a href="https://github.com/kubernetes/kubernetes/blob/v1.5.0/docs/devel/container-runtime-interface.md" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.5</a> (2016) 中产生了容器运行时接口 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">CRI</code> API。CRI 首次亮相后，业界已趋同于使用 <a href="https://containerd.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">containerd</a> 和 <a href="https://cri-o.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">CRI-O</a> 这两种运行时其中之一：。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*04Edb0wEnXci2c5ye9F8dA.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Kubernetes 仍然内置了对 Docker 的支持，但最终在 Kubernetes <a href="https://kubernetes.io/blog/2022/03/31/ready-for-dockershim-removal/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.24</a>（2022年）中被删除。Docker 仍然继续作为第三方运行时为 Kubernetes 工作（通过 <a href="https://github.com/Mirantis/cri-dockerd" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">cri-dockerd</code></a> shim），但 Docker 现在在 Kubernetes 中的使用率越来越低。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*ttq05nTH21UT577xW-FIRg.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">业界知名大厂已经从 Docker 转向了 containerd 或者 CRI-O：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">containerd 的采用者</strong>：<a href="https://docs.aws.amazon.com/eks/latest/userguide/dockershim-deprecation.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Amazon Elastic Kubernetes Service (EKS)</a>、<a href="https://learn.microsoft.com/en-us/azure/aks/cluster-configuration#container-runtime-configuration" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Azure Kubernetes Service (AKS)</a>、<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/migrate-containerd" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Google Kubernetes Engine (GKE)</a>、<a href="https://docs.k3s.io/advanced#configuring-containerd" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">k3s</a> 等（很多）。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">CRI-O 的采用者</strong>：<a href="https://docs.openshift.com/container-platform/4.13/architecture/architecture.html#architecture-custom-os_architecture" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Red Hat OpenShift</a>、<a href="https://docs.oracle.com/en-us/iaas/Content/ContEng/Concepts/contengaboutk8sversions.htm" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Oracle Container Engine for Kubernetes (OKE)</a> 等。</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Containerd 注重可扩展性，支持非 Kubernetes 工作负载以及 Kubernetes 工作负载。相比之下，CRI-O 注重简单性，并且仅支持 Kubernetes。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker 的替代方案（作为 CLI）</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">尽管 Kubernetes 已成为多节点生产集群的标准，但用户仍然希望使用类似 Docker 的 CLI 在笔记本电脑上本地构建和测试容器。Docker 基本上满足了这个需求，但是社区中的运行时开发人员希望构建自己的“实验室”CLI，以先于 Docker 和 Kubernetes 孵化新功能，因为通常很难向 Docker 和 Kubernetes 提出新功能，由于一些技术/技术因素原因。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://podman.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Podman</a>（以前称为 kpod ）是由 Red Hat 等公司创建的兼容 Docker 的独立容器引擎。它与 Docker 的主要区别在于它默认没有守护进程。此外，Podman 的独特之处在于它为管理 Pod（共享相同网络命名空间的容器组，通常共享同一主机上的数据卷以实现高效通信）以及容器提供一流的支持。然而，大多数用户似乎只将 Podman 用于非 Pod 容器。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://github.com/containerd/nerdctl" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">nerdctl</a>（我于 2020 年创立）是一个适用于 containerd 的兼容 Docker 的 CLI。nerdctl 最初是为了试验新功能，例如延迟拉取（稍后讨论），但它对于调试运行 containerd 的 Kubernetes 节点也很有用。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">在 Mac 上运行容器</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://www.docker.com/products/docker-desktop/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker Desktop</a> 的 Mac 和 Windows 产品是专有的。Windows 用户可以在 WSL2 中运行 Docker 的 Linux 版本（Apache License 2.0，无图形界面），但迄今为止，Mac 用户还没有相应的解决方案。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://lima-vm.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Lima</a>（也是我于 2021 年创立的）是一个命令行工具，用于在 macOS 上创建类似 WSL2 的环境来运行容器。Lima 默认使用 nerdctl，但它也支持 Docker 和 Podman。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Lima 还被 <a href="https://github.com/abiosoft/colima" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">colima</a> (2021)、<a href="https://rancherdesktop.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Rancher Desktop</a> (2021) 和 <a href="https://github.com/runfinch/finch" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Finch</a> (2022)等第三方项目采用。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Podman 社区发布了 <a href="https://docs.podman.io/en/latest/markdown/podman-machine.1.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Podman Machine</a>（命令行工具，2021 年）和 <a href="https://podman-desktop.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Podman Desktop</a>（GUI，2022 年）作为 Docker Desktop 的替代品。Podman Desktop 也支持 Lima（可选）。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Docker 正在重构</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">containerd 主要提供两个子系统：运行时子系统和镜像子系统。然而，后者并未被Docker使用。这是一个问题，因为 Docker 自身的传统镜像子系统远远落后于 containerd 的现代镜像子系统（这也导致我启动了nerdctl项目）：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">不支持 <a href="https://github.com/containerd/stargz-snapshotter" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">lazy-pulling 惰性拉取</a>（按需镜像拉取）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/moby/moby/issues/44582" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">对多平台镜像的有限支持</a>（例如 AMD64/ARM64 双平台镜像）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/moby/moby/issues/25779" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">OCI 规范的有限合规性</a></section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">这个长期存在的问题终于得到解决。Docker v24 (2023) 在 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">/etc/docker/daemon.json</code> 中添加了对使用 containerd 的镜像子系统和 <a href="https://github.com/moby/moby/blob/v24.0.2/daemon/daemon.go#L801" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">undocumented option</a> 的实验性支持：</p>
<pre class="custom" data-tool="markdown.com.cn编辑器" style="margin-top: 10px; margin-bottom: 10px;"><code class="hljs" style="overflow-x: auto; padding: 16px; color: #333; background: #f8f8f8; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch;">{<span class="hljs-attr" style="line-height: 26px;">"features"</span>:{<span class="hljs-attr" style="line-height: 26px;">"containerd-snapshotter"</span>:&nbsp;<span class="hljs-literal" style="color: #008080; line-height: 26px;">true</span>}}<br></code></pre>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Docker 的未来版本（2024？2025？）很可能默认使用 containerd 的镜像子系统。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Lazy-pulling 惰性拉取</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">容器镜像中的大多数文件从未被使用：</p>
<blockquote data-tool="markdown.com.cn编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); padding-top: 10px; padding-bottom: 10px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 2px solid #888; border-right: 2px solid #888; padding-left: 1em; color: #777;">
<p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; text-align: justify; margin: 0px; color: black; line-height: 26px;"><strong style="font-weight: bold; color: black;">“拉取包占容器启动时间的 76%，但其中只有 6.4％ 的数据被读取”</strong>
摘自“ <a href="https://www.usenix.org/conference/fast16/technical-sessions/presentation/harter" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Slacker：使用 Lazy Docker 容器进行快速分发</a>”（Harter 等人，FAST 2016）</p>
</blockquote>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">“惰性拉取”是一种通过按需拉取部分镜像内容来减少容器启动时间的技术。对于 <a href="https://github.com/opencontainers/image-spec/blob/v1.0.2/layer.md" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">OCI 标准 tar.gz 镜像</a> 来说这是不可能的，因为它们不支持 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">seek()</code> 操作。人们提出了几种替代格式来支持惰性拉取：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/containerd/stargz-snapshotter" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">eStargz</strong></a> (2019) ：优化 seek() 能力的 gzip 粒度；向前兼容 OCI v1 tar.gz。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/awslabs/soci-snapshotter" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">SOCI</strong></a> (2022)：捕获 tar.gz 解码器状态的检查点；向前兼容 OCI v1 tar.gz。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/containerd/nydus-snapshotter" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">Nydus</strong></a> (2022)：另一种图像格式；
与 OCI v1 tar.gz 不兼容。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><a href="https://github.com/containerd/overlaybd" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">OverlayBD</strong></a> (2021)：将块设备作为容器镜像；与 OCI v1 tar.gz 不兼容。</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">下图显示了 eStargz 的基准测试结果。惰性拉动（+额外优化）可以将容器启动时间减少到 1/9。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*MoC4Bvx7V4t6gtRD9UbGkg.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">扩大 User namespace 的采用</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">尽管 Docker 自 <a href="https://github.com/moby/moby/pull/12648" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.9</a>（2015）以来一直支持用户命名空间，但在 Docker 和 Kubernetes 生态系统中仍然很少使用。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">原因之一是 “chowning” 容器 rootfs 作为伪根的复杂性和开销。Linux 内核 <a href="https://kernelnewbies.org/Linux_5.12#ID_mapping_in_mounts" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v5.12</a> (2021) 添加了 “idmapped mounts” 以消除 chown 的必要性。计划在 <a href="https://github.com/opencontainers/runc/pull/3717" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">runc v1.2</a> 中支持这一点。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">runc v1.2 发布后，用户命名空间预计将在 Docker 和 Kubernetes 中更加流行，而 Docker 和 Kubernetes 刚刚在 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.25.md" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.25</a>（2022）中添加了对用户命名空间的 <a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/127-user-namespaces/README.md" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">初步支持</a>。出于兼容性考虑，Kubernetes 不太可能默认启用用户命名空间。然而，Docker <a href="https://github.com/moby/moby/pull/38795" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">将来</a> 仍有可能默认启用用户命名空间。不过，一切还没有决定。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Rootless 容器</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://rootlesscontaine.rs/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Rootless 容器</a> 是一种将容器运行时以及容器放置在由非 root 用户创建的用户命名空间中的技术，以减轻运行时的潜在漏洞。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">即使容器运行时存在允许攻击者逃离容器的错误，攻击者也无法拥有对其他用户的文件、内核、固件和设备的特权访问权限。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">以下是 rootless 容器的简史：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2014</strong>：<a href="https://stgraber.org/2014/01/17/lxc-1-0-unprivileged-containers/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">LXC v1.0</a> 引入了对 rootless 容器的支持。当时 rootless 容器被称为“非特权容器”。LXC 的非特权容器与现代 rootless 容器略有不同，因为它们需要 <a href="https://man7.org/linux/man-pages/man1/lxc-user-nic.1.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">SETUID 二进制文件</a> 来 <a href="https://man7.org/linux/man-pages/man5/lxc-usernet.5.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">启动网络</a>。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2017</strong>：runc <a href="https://github.com/opencontainers/runc/releases/tag/v1.0.0-rc4" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.0-rc4</a> 获得对 rootless容器的初步支持。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2018</strong>：一些工具已经开始支持，<a href="https://twitter.com/_AkihiroSuda_/status/953231819008180224" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">containerd</a>、<a href="https://twitter.com/_AkihiroSuda_/status/955698849560997888" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">BuildKit</a>（<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">docker build</code>的后端）、<a href="https://github.com/AkihiroSuda/docker/commit/588a4e91fc8cb99af040dcde795ba6722a162127" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Docker</a>、<a href="https://github.com/containers/podman/commit/19f5a504ffb1470991f331db412be456e41caab5" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Podman</a>。<a href="https://github.com/rootless-containers/slirp4netns" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">slirp4netns</a> 被我自己创建，以通过转换以太网来允许 SETUID-less 网络数据包发送至非特权套接字系统调用。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2019</strong>：Docker <a href="https://docs.docker.com/engine/release-notes/19.03/#19030" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v19.03</a> 发布，对 rootless 容器提供实验性支持。Podman <a href="https://github.com/containers/podman/releases/tag/v1.1.0" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v1.1</a> 也在今年发布，具有相同的功能，略领先于 Docker v19.03。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">2020</strong>：Docker <a href="/nttlabs/docker-20-10-59cc4bd59d37" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v20.10</a> 发布，rootless 容器全面可用。</section></li></ul>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*41peAl7SSpEZqQGpkRmmUw.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">从 2020 年到 2022 年，我们还致力于 <a href="https://github.com/rootless-containers/bypass4netns" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">bypass4netns</a>，通过在容器内挂钩套接字文件描述符并在容器外重建它们来消除 slirp4netns 的开销。所实现的吞吐量甚至比 “rootful” 容器更快。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*h5_2ZjoGixRrOfZdOu8ysA.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Rootless 容器已经成功普及，但也有人对 rootless 容器提出批评。特别是，是否应该允许非root用户创建运行无根容器所需的用户命名空间是有争议的。对于容器用户，我的回答是“是”，因为无根容器至少比以根身份运行所有内容要安全得多。但是，对于不使用容器的人，我宁愿回答“否”，因为用户命名空间也可能是攻击面。例如，<a href="https://www.tarlogic.com/blog/cve-2023-32233-vulnerability/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><strong style="font-weight: bold; color: black;">CVE-2023–32233 漏洞</strong>：“Privilege escalation in Linux Kernel due to a Netfilter nf_tables vulnerability.”</a>。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">社区已经在寻求解决这一困境的方法。Ubuntu（自 13.10 起）和 Debian 提供了一个 sysctl 设置 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">kernel.unprivileged_userns_clone=&lt;bool&gt;</code> 来指定是否允许或禁止创建非特权用户命名空间。然而，他们的<a href="https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/jammy/commit/kernel/user_namespace.c?id=342276469714b5a307745d1a3b9bdc146c804e4e" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">补丁</a>并没有合并到上游 Linux 内核中。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">相反，上游内核在 Linux <a href="https://github.com/torvalds/linux/commit/7cd4c5c2101cb092db00f61f69d24380cf7a0ee8" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v6.1</a> (2022) 中引入了新的 LSM（Linux 安全模块）钩子 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">userns_create</code> ，以便 LSM 可以动态决定是否允许或禁止创建用户命名空间。该钩子可从 <a href="https://docs.kernel.org/bpf/prog_lsm.html" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">eBPF (<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">bpf_program__atttach_lsm()</code>)</a> 调用，因此预计将有一个不依赖于 AppArmor 或 SELinux 的细粒度且非特定于发行版的旋钮。然而，eBPF + LSM 的用户空间实用程序尚未成熟，无法为此提供良好的用户体验。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">更多 LSM</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://landlock.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Landlock</a> LSM 已合并到 Linux <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=17ae69aba89dbfa2139b7f8024b757ab3cc42f59" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">v5.13</a> (2021) 中。Landlock 与 AppArmor 类似，它通过路径（<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">LANDLOCK_ACCESS_FS_EXECUTE</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">LANDLOCK_ACCESS_FS_READ_FILE</code> 等）限制文件访问，但 Landlock 不需要 root 权限来设置新配置文件。Landlock 也与 OpenBSD 的 <a href="https://man.openbsd.org/pledge.2" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">promise(2)</code></a> 非常相似。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Landlock 仍然 <a href="https://github.com/opencontainers/runtime-spec/pull/1111" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">不受 OCI Runtime Spec 支持</a>，但我猜它可以包含在 OCI Runtime Spec v1.2 中。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">Kata Containers</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">正如我在第一部分中提到的，“容器”并不是一个定义明确的术语。任何东西只要能与现有的容器生态系统提供良好的兼容性，就可以称为“容器”。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://katacontainers.io/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">Kata Containers</a> (2017) 就是这样一种“容器”，实际上并不是狭义上的容器。Kata 容器实际上是虚拟机，但支持 OCI 运行时规范。Kata 容器比 runc 容器安全得多，但是它们在性能方面存在缺陷，并且在不支持嵌套虚拟化的典型非裸机 IaaS 实例上无法正常工作。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">Kata Containers 作为一个 containerd 运行时插件，并接收与 runc 容器相同的镜像和运行时配置。它的用户体验与 runc 容器几乎没有区别。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">gVisor</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://gvisor.dev/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">gVisor</a> (2018) 是另一个奇特的容器运行时。gVisor 捕获系统调用并在 Linux 兼容的用户模式内核中执行它们以减轻攻击。gVisor 目前具有 <a href="https://gvisor.dev/docs/architecture_guide/platforms/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">三种</a> 捕获系统调用的模式：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">KVM 模式</strong>：很少使用，但是裸机主机的最佳选择</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">ptrace 模式</strong>：最常见的选项，但速度较慢</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">SIGSYS trap 模式</strong>（自 2023 年起）：预计最终取代 ptrace 模式</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">gVisor 已用于 Google 的多个产品中，包括 Google Cloud Run。然而，Google Cloud Run 已于 2023 年从 gVisor 转向 microVM。这意味着 gVisor 的性能和兼容性问题对于他们的业务来说是不可忽视的。</p>
<h3 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 20px; margin: 0.6em auto; padding-left: 10px; border-left: 2px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">WebAssembly</span><span class="suffix" style="display: none;"></span></h3>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><a href="https://webassembly.org/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">WebAssembly (WASM) </a> 是一种独立于平台的字节代码格式，最初于 <a href="https://blog.mozilla.org/luke/2015/06/17/webassembly/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">2015 年</a> 为 Web 浏览器设计。WebAssembly 与 Java applet (1995) 有点相似，但它更注重可移植性和安全性。WebAssembly 的一个有趣的方面是它将代码地址空间与数据地址空间分开；没有像 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">JMP &lt;immediate&gt;</code> 和 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">JMP *&lt;reg&gt;</code> 这样的指令。它仅支持 <a href="https://webassembly.github.io/spec/core/syntax/instructions.html#control-instructions" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">跳转到在编译时解析的标签</a>。这种设计减少了任意代码执行错误，尽管它也牺牲了 JIT 将其他字节代码格式编译为 WebAssembly 的可行性。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">WebAssembly 作为容器的潜在替代品也受到关注。为了在浏览器之外运行 WebAssembly，<a href="https://wasi.dev/" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">WASI</a>（WebAssembly 系统接口）于 2019 年提出，提供低级 API（例如 <a href="https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">fd_read()</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">fd_write()</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">sock_recv()</code>、<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">sock_send()</code></a>）可用于在其上实现类似 POSIX 的层。containerd 在 2022 年添加了 <a href="https://github.com/containerd/runwasi" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">runWASI</a> 插件，将 WASI 工作负载视为容器。</p>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">2023年，<a href="https://wasix.org/docs/api-reference" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">WASIX</a> 被提议扩展 WASI 以提供更方便（也有些争议）的功能：</p>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">线程</strong>：<a href="https://wasix.org/docs/api-reference/wasix/thread_spawn" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">thread_spawn()</code></a>, <a href="https://wasix.org/docs/api-reference/wasix/thread_join" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">thread_join()</code></a>`, ...</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">进程：</strong> <a href="https://wasix.org/docs/api-reference/wasix/proc_fork" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">proc_fork()</code></a>, <a href="https://wasix.org/docs/api-reference/wasix/proc_exec" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">proc_exec()</code></a>, ...</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><strong style="font-weight: bold; color: black;">套接字</strong>：<a href="https://wasix.org/docs/api-reference/wasix/sock_listen" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">sock_listen()</code></a>, <a href="https://wasix.org/docs/api-reference/wasix/sock_connect" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;"><code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #009688;">sock_connect()</code></a>, ...</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">最终，这些技术可能会取代很大一部分（但不是 100%）的容器。Docker 的创始人 Solomon Hykes 表示：“<em style="font-style: italic; color: black;">如果 WASM+WASI 在 2008 年就存在，我们就不需要创建 Docker 了</em> ”。</p>
<h2 data-tool="markdown.com.cn编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; font-size: 22px; color: #009688; padding-left: 10px; margin: 1em auto; border-left: 3px solid #009688;"><span class="prefix" style="display: none;"></span><span class="content">总结</span><span class="suffix"></span></h2>
<ul data-tool="markdown.com.cn编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;">
<li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">容器比虚拟机更高效，但安全性往往也更低。人们正在引入许多安全技术来强化容器。（用户命名空间、无根容器、Linux 安全模块……）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Docker 的替代品不断涌现（containerd、CRI-O、Podman、nerdctl、Finch 等），但 Docker 并没有消失。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">“Non-container” 容器也是趋势。（<strong style="font-weight: bold; color: black;">Kata</strong>：基于 VM，<strong style="font-weight: bold; color: black;">gVisor</strong>：用户模式内核，<strong style="font-weight: bold; color: black;">runWASI</strong>：WebAssembly，...）</section></li></ul>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">下图显示了著名的运行时的概况。</p>
<figure data-tool="markdown.com.cn编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px;"><img src="https://miro.medium.com/1*_x0ujgxNUyzBIco_J6O-mw.png" alt style="display: block; margin: 0 auto; width: auto; max-width: 100%;"></figure>
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;">更多内容另请参阅 <a href="https://github.com/AkihiroSuda/AkihiroSuda/raw/5d9f0b1cd9b8c37cb1951768a3bebdb08a3a469e/slides/2023/20230615%20%5BKyoto%20University%5D%20The%20internals%20and%20the%20latest%20trends%20of%20container%20runtimes.pdf" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: #009688; border-bottom: 1px solid #009688;">PPT</a> 的其余部分，了解本文中无法涵盖的其他主题。</p>
<hr data-tool="markdown.com.cn编辑器" style="height: 1px; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black; margin: 20px 0;">
<p data-tool="markdown.com.cn编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; text-align: justify;"><em style="font-style: italic; color: black;">文本翻译自: https://medium.com/nttlabs/the-internals-and-the-latest-trends-of-container-runtimes-2023-22aa111d7a93</em></p>
<hr data-tool="markdown.com.cn编辑器" style="height: 1px; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black; margin: 20px 0;">
</section>