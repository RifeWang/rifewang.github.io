<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>凌虚 Blog</title><link>https://rifewang.github.io/</link><description>这是凌虚的博客网站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Mon, 23 Dec 2024 16:55:13 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes APF（API 优先级和公平调度）简介</title><link>https://rifewang.github.io/k8s-apf/</link><pubDate>Mon, 23 Dec 2024 16:55:13 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-apf/</guid><description><![CDATA[<p>在 Kubernetes 集群中，<code>kube-apiserver</code> 是一个至关重要的组件，它不仅要对外响应客户端的 HTTPS 请求，还要对内与 <code>controller-manager</code>、<code>scheduler</code>、<code>kubelet</code> …… 等等其它组件交互。</p>]]></description></item><item><title>我对 OpenAI Kubernetes 集群故障的追问与疑惑</title><link>https://rifewang.github.io/openai-k8s-fail-confusion/</link><pubDate>Thu, 19 Dec 2024 15:06:08 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/openai-k8s-fail-confusion/</guid><description><![CDATA[<p>2024 年 12 月 11 号，<code>OpenAI</code> 的 <code>Kubernetes</code> 集群发生故障，<code>API</code>、<code>ChatGPT</code>、<code>Sora</code> 等服务都受到了影响，且时间长达 4 小时 22 分钟。</p>
<p>关于这次故障，官方有公开复盘，也有很多媒体博主追踪报导。然而，我对此并不满意，<strong>本文我将会提出自己的疑惑与追问</strong>。</p>]]></description></item><item><title>系统组件优化的思考框架</title><link>https://rifewang.github.io/component-optimize/</link><pubDate>Sat, 14 Dec 2024 16:23:07 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/component-optimize/</guid><description><![CDATA[<p>我之前的文章里有分享过自己总结的做技术选型的思考框架，本文将会分享一下我总结的做系统组件调优/优化的思考框架。</p>
<h2 id="组件优化的思考框架">组件优化的思考框架</h2>
<p>常见的互联网架构基本离不开数据库、缓存、消息队列、搜索、数据处理等等各种组件，虽然组件的形态不一、功能不同，但是我仍然把对他们的优化总结归纳为了以下几点：</p>]]></description></item><item><title>Kubernetes：CPU 配置、Linux CFS、编程语言的性能问题</title><link>https://rifewang.github.io/k8s-cpu-linux-cfs-app-performance/</link><pubDate>Wed, 11 Dec 2024 15:44:11 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-cpu-linux-cfs-app-performance/</guid><description><![CDATA[<h2 id="kubernetes-cpu-配置---linux-cfs">Kubernetes CPU 配置 -&gt; Linux CFS</h2>
<p>在使用 Kubernetes 时，可以通过 <code>resources.requests</code> 和 <code>resources.limits</code> 配置资源的请求和限额，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;250m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;500m&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对容器的资源配置会通过 <code>CRI</code> 组件（如 <code>containerd</code>、<code>cri-o</code> 交由更底层的 <code>runc</code> 或 <code>kata-container</code>）去设置 Linux 的 cgroup。</p>]]></description></item><item><title>Kubernetes 集群网络：Flannel 与 Calico 的区别</title><link>https://rifewang.github.io/flannel-calico/</link><pubDate>Sat, 30 Nov 2024 10:23:42 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/flannel-calico/</guid><description><![CDATA[<p>有读者提问：<code>Flannel</code> 与 <code>Calico</code> 的区别。文本将解析一下这两个组件。</p>
<h2 id="flannel">Flannel</h2>
<p><code>Flannel</code> 的架构非常简单，只有两个组件：<code>flanneld</code> 和 <code>flannel-cni-plugin</code>。</p>
<p>在功能特性上，<code>Flannel</code> 有三个部分：</p>]]></description></item><item><title>AI 声音：数字音频、语音识别、TTS 简介与使用示例</title><link>https://rifewang.github.io/audio-asr-tts/</link><pubDate>Thu, 28 Nov 2024 12:02:09 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/audio-asr-tts/</guid><description><![CDATA[<p>在现代 AI 技术的推动下，声音处理领域取得了巨大进展。从语音识别（<code>ASR</code>）到文本转语音（<code>TTS</code>），再到个性化声音克隆，这些技术已经深入到我们的日常生活中：语音助手、自动字幕生成、语音导航等应用无处不在。</p>]]></description></item><item><title>Web 端语音对话 AI 示例：使用 Whisper 和 llama.cpp 构建语音聊天机器人</title><link>https://rifewang.github.io/web-voice-chat-llm/</link><pubDate>Sun, 24 Nov 2024 16:32:58 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/web-voice-chat-llm/</guid><description><![CDATA[<p>大语言模型（<code>LLM</code>）为基于文本的对话提供了强大的能力。那么，能否进一步扩展，将其转化为语音对话的形式呢？本文将展示如何使用 <code>Whisper</code> 语音识别和 <code>llama.cpp</code> 构建一个 Web 端语音聊天机器人。</p>]]></description></item><item><title>构建自己的框架去做技术选型</title><link>https://rifewang.github.io/technology-selection/</link><pubDate>Thu, 21 Nov 2024 20:20:56 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/technology-selection/</guid><description>&lt;p>技术选型无处不在，你可能需要选择一种类库、选择一个框架、选择一种语言、选择一种组件、选择一个架构模式、选择一种系统方案……。
那么如何构建一个决策或思维框架去做技术选型呢？&lt;/p></description></item><item><title>RAG 示例：使用 langchain、Redis、llama.cpp 构建一个 kubernetes 知识库问答</title><link>https://rifewang.github.io/rag-langchain-redis-llamacpp/</link><pubDate>Tue, 19 Nov 2024 16:22:09 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/rag-langchain-redis-llamacpp/</guid><description><![CDATA[<p><code>RAG</code>（<code>Retrieval Augmented Generation</code> 检索增强生成）是目前业界中的一种主流方法，通过增加额外知识的方式来减少大语言模型（<code>LLM</code>）的幻觉问题（一本正经的胡说八道）。</p>]]></description></item><item><title>Kubernetes 10 问，测测你对 k8s 的理解程度</title><link>https://rifewang.github.io/k8s-10-questions/</link><pubDate>Sat, 16 Nov 2024 15:14:17 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/k8s-10-questions/</guid><description><![CDATA[<h2 id="kubernetes-10-问">Kubernetes 10 问</h2>
<ol>
<li>
<p>假设集群有 2 个 node 节点，其中一个有 pod，另一个则没有，那么新的 pod 会被调度到哪个节点上？</p>
</li>
<li>
<p>应用程序通过容器的形式运行，如果 OOM（Out-of-Memory）了，是容器重启还是所在的 Pod 被重建？</p>]]></description></item></channel></rss>