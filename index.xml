<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>凌虚 Blog</title><link>https://rifewang.github.io/</link><description>这是凌虚的博客网站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Apr 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Elasticsearch 向量搜索</title><link>https://rifewang.github.io/es-vector-search/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/es-vector-search/</guid><description>Elasticsearch 向量搜索 本文将会介绍 Elasticsearch 向量搜索的两种方式。 向量搜索 提到向量搜索，我想你一定想知道： 向量搜索是什么？ 向量搜索的应用场景有哪些？ 向量搜索与全文</description></item><item><title>Terraform: 基础设施即代码</title><link>https://rifewang.github.io/terraform-overview/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/terraform-overview/</guid><description>Terraform: 基础设施即代码 问题 现如今有很多 IT 系统的基础设施直接使用了云厂商提供的服务，假设我们需要构建以下基础设施： VPC 网络 虚拟主机 负载均衡器 数据库 文件</description></item><item><title>加速 Kubernetes 镜像拉取</title><link>https://rifewang.github.io/speed-up-image-pull/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/speed-up-image-pull/</guid><description>加速 Kubernetes 镜像拉取 Kubernetes pod 启动时会拉取用户指定的镜像，一旦这个过程耗时太久就会导致 pod 长时间处于 pending 的状态，从而无法快速提供服务。 镜像拉取的过程参考下图</description></item><item><title>web 安全系列文章【译文】</title><link>https://rifewang.github.io/web-security/</link><pubDate>Thu, 12 Aug 2021 10:58:20 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/web-security/</guid><description>Cross-site request forgery (CSRF) CSRF XSS vs CSRF CSRF tokens SameSite cookies Clickjacking (UI redressing) Clickjacking (UI redressing) Cross-origin resource sharing (CORS) CORS Same-origin policy (SOP) Access-control-allow-origin Server-side request forgery (SSRF) Server-side request forgery (SSRF) Blind SSRF vulnerabilities HTTP request smuggling HTTP request smuggling Finding HTTP request smuggling vulnerabilities Exploiting HTTP request smuggling vulnerabilities OS command injectionn OS command injection Server-side template injection Server-side template injection Exploiting server-side template injection</description></item><item><title>解读 MySQL Client/Server Protocol: Connection &amp; Replication</title><link>https://rifewang.github.io/protocol-connectionreplication/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/protocol-connectionreplication/</guid><description>解读 MySQL Client/Server Protocol: Connection &amp;amp; Replication MySQL 客户端与服务器之间的通信基于特定的 TCP 协议，本文将会详解其中的 Connection 和 Replication 部分，这两个部分分别对应的是客户端与服务器建立连接、完成</description></item><item><title>同步 MySQL 数据至 Elasticsearch/Redis/MQ 等的五种方式</title><link>https://rifewang.github.io/sync-data-from-mysql/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/sync-data-from-mysql/</guid><description>同步 MySQL 数据至 Elasticsearch/Redis/MQ 等的五种方式 在实际应用中，我们经常需要把 MySQL 的数据同步至其它数据源，也就是在对 MySQL 的数据进行了新增、修改、删除等操作后，把该数据相</description></item><item><title>Elasticsearch 分布式搜索的运行机制</title><link>https://rifewang.github.io/es-distribute-search-steps/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/es-distribute-search-steps/</guid><description>Elasticsearch 分布式搜索的运行机制 ES 有两种 search_type 即搜索类型： query_then_fetch （默认） dfs_query_then_fetch query_then_fetch 用户发起搜索，请求到集群中的某个节点。 query 会被发送到所有相关的 shard 分片上。 每个 shard 分片独</description></item><item><title>Elasticsearch Search Template</title><link>https://rifewang.github.io/es-search-template/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/es-search-template/</guid><description>Elasticsearch Search Template 所谓 search template 搜索模板其实就是： 预先定义好查询语句 DSL 的结构并预留参数 搜索的时再传入参数值 渲染出完整的 DSL ，最后进行搜索 使用搜索模板可以将 DSL 从应</description></item><item><title>构造请求日志分析系统</title><link>https://rifewang.github.io/log-analyzer-system/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/log-analyzer-system/</guid><description>构造请求日志分析系统 请求日志记录哪些数据 time_local : 请求的时间 remote_addr : 客户端的 IP 地址 request_method : 请求方法 request_schema : 请求协议，常见的 http 和 https request_host : 请求的域名 request_path : 请求的 path 路径</description></item><item><title>Elasticsearch 自定义打分 Function score query</title><link>https://rifewang.github.io/es-function-score-query/</link><pubDate>Mon, 02 Nov 2020 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/es-function-score-query/</guid><description>Elasticsearch 自定义打分 Function score query Elasticsearch 会为 query 的每个文档计算一个相关度得分 score ，并默认按照 score 从高到低的顺序返回搜索结果。 在很多场景下，我们不仅需要搜索到匹配的结果</description></item></channel></rss>