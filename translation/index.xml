<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Translations on 凌虚 Blog</title><link>https://rifewang.github.io/translation/</link><description>Recent content in Translations on 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Wed, 10 Mar 2021 01:00:00 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/translation/index.xml" rel="self" type="application/rss+xml"/><item><title>web 安全之 Server-side template injection</title><link>https://rifewang.github.io/translation/web-security/server-side-template-injection/server-side-template-injection/</link><pubDate>Wed, 10 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/server-side-template-injection/server-side-template-injection/</guid><description>Server-side template injection 在本节中，我们将介绍什么是服务端模板注入，并概述利用此漏洞的基本方法，同时也将提供一些避免此漏洞的建议。 什么是服务端模板注入 服务端模板</description></item><item><title>Exploiting server-side template injection vulnerabilities</title><link>https://rifewang.github.io/translation/web-security/server-side-template-injection/exploiting-server-side-template-injection-vulnerabilities/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/server-side-template-injection/exploiting-server-side-template-injection-vulnerabilities/</guid><description>利用服务端模板注入漏洞 在本节中，我们将更仔细地了解一些典型的服务端模板注入漏洞，并演示如何利用之前归纳的方法。通过付诸实践，你可以潜在地发现</description></item><item><title>web 安全之 CSRF</title><link>https://rifewang.github.io/translation/web-security/csrf/csrf/</link><pubDate>Tue, 09 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/csrf/csrf/</guid><description>Cross-site request forgery (CSRF) 在本节中，我们将解释什么是跨站请求伪造，并描述一些常见的 CSRF 漏洞示例，同时说明如何防御 CSRF 攻击。 什么是 CSRF 跨站请求伪造（CSRF）是一种 web</description></item><item><title>CSRF tokens</title><link>https://rifewang.github.io/translation/web-security/csrf/csrf-tokens/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/csrf/csrf-tokens/</guid><description>CSRF tokens 在本节中，我们将解释什么是 CSRF token，它们是如何防御的 CSRF 攻击，以及如何生成和验证CSRF token 。 什么是 CSRF token CSRF token 是一个唯一的、秘密的、不可预</description></item><item><title>SameSite cookies</title><link>https://rifewang.github.io/translation/web-security/csrf/samesite-cookies/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/csrf/samesite-cookies/</guid><description>SameSite cookies 某些网站使用 SameSite cookies 防御 CSRF 攻击。 这个 SameSite 属性可用于控制是否以及如何在跨站请求中提交 cookie 。通过设置会话 cookie 的属性，应用程序可以防止浏览器默认自动向请</description></item><item><title>XSS vs CSRF</title><link>https://rifewang.github.io/translation/web-security/csrf/xss-vs-csrf/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/csrf/xss-vs-csrf/</guid><description>XSS vs CSRF 在本节中，我们将解释 XSS 和 CSRF 之间的区别，并讨论 CSRF token 是否有助于防御 XSS 攻击。 XSS 和 CSRF 之间有啥区别 跨站脚本攻击 XSS 允许攻击者在受害者用户的浏览器中</description></item><item><title>web 安全之 DOM-based vulnerabilities</title><link>https://rifewang.github.io/translation/web-security/dom-based/dom-based-vulnerabilities/</link><pubDate>Sun, 07 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/dom-based/dom-based-vulnerabilities/</guid><description>DOM-based vulnerabilities 在本节中，我们将描述什么是 DOM ，解释对 DOM 数据的不安全处理是如何引入漏洞的，并建议如何在您的网站上防止基于 DOM 的漏洞。 什么是 DOM Document Object Model（</description></item><item><title>DOM clobbering</title><link>https://rifewang.github.io/translation/web-security/dom-based/dom-clobbering/</link><pubDate>Sun, 07 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/dom-based/dom-clobbering/</guid><description>DOM clobbering 在本节中，我们将描述什么是 DOM clobbing ，演示如何使用 clobbing 技术来利用 DOM 漏洞，并提出防御 DOM clobbing 攻击的方法。 什么是 DOM clobbering DOM clobbering 是一种将 HTML 注入页面以操作 DOM 并最终</description></item><item><title>web 安全之 HTTP Host header attacks</title><link>https://rifewang.github.io/translation/web-security/http-host-header-attacks/http-host-header-attacks/</link><pubDate>Sat, 06 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/http-host-header-attacks/http-host-header-attacks/</guid><description>HTTP Host header attacks 在本节中，我们将讨论错误的配置和有缺陷的业务逻辑如何通过 HTTP Host 头使网站遭受各种攻击。我们将概述识别易受 HTTP Host 头攻击的网站的高级方法，并演</description></item><item><title>Exploiting HTTP Host header vulnerabilities</title><link>https://rifewang.github.io/translation/web-security/http-host-header-attacks/exploiting-http-host-header-vulnerabilities/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/http-host-header-attacks/exploiting-http-host-header-vulnerabilities/</guid><description>如何识别和利用 HTTP Host 头漏洞 在本节中，我们将更仔细地了解如何识别网站是否存在 HTTP Host 头漏洞。然后，我们将提供一些示例，说明如何利用此漏洞。 如何使用 HTTP</description></item><item><title>Password reset poisoning</title><link>https://rifewang.github.io/translation/web-security/http-host-header-attacks/password-reset-poisoning/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/http-host-header-attacks/password-reset-poisoning/</guid><description>Password reset poisoning 密码重置中毒是一种技术，攻击者可以利用该技术来操纵易受攻击的网站，以生成指向其控制下的域的密码重置链接。这种行为可以用来窃取重置任意用</description></item><item><title>web 安全之 Clickjacking</title><link>https://rifewang.github.io/translation/web-security/clickjacking/clickjacking/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/clickjacking/clickjacking/</guid><description>Clickjacking ( UI redressing ) 在本节中，我们将解释什么是 clickjacking 点击劫持，并描述常见的点击劫持攻击示例，以及讨论如何防御这些攻击。 什么是点击劫持 点击劫持是一种基于界面</description></item><item><title>web 安全之 HTTP request smuggling</title><link>https://rifewang.github.io/translation/web-security/request-smuggling/http-request-smuggling/</link><pubDate>Thu, 04 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/request-smuggling/http-request-smuggling/</guid><description>HTTP request smuggling 在本节中，我们将解释什么是 HTTP 请求走私，并描述常见的请求走私漏洞是如何产生的。 什么是 HTTP 请求走私 HTTP 请求走私是一种干扰网站处理多个 HTTP 请求序列</description></item><item><title>Exploiting request smuggling</title><link>https://rifewang.github.io/translation/web-security/request-smuggling/exploiting-request-smuggling/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/request-smuggling/exploiting-request-smuggling/</guid><description>利用 HTTP 请求走私漏洞 在本节中，我们将描述 HTTP 请求走私漏洞的几种利用方法，这也取决于应用程序的预期功能和其他行为。 利用 HTTP 请求走私漏洞绕过前端服务器</description></item><item><title>Finding request smuggling</title><link>https://rifewang.github.io/translation/web-security/request-smuggling/finding-request-smuggling/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/request-smuggling/finding-request-smuggling/</guid><description>查找 HTTP 请求走私漏洞 在本节中，我们将介绍用于查找 HTTP 请求走私漏洞的不同技术。 计时技术 检测 HTTP 请求走私漏洞的最普遍有效的方法就是计时技术。发送请求，</description></item><item><title>web 安全之 OS command injection</title><link>https://rifewang.github.io/translation/web-security/command-injection/os-command-injection/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/command-injection/os-command-injection/</guid><description>OS command injection 在本节中，我们将解释什么是操作系统命令注入，描述如何检测和利用此漏洞，为不同的操作系统阐明一些有用的命令和技术，并总结如何防止操作系统</description></item><item><title>web 安全之 Server-side request forgery</title><link>https://rifewang.github.io/translation/web-security/ssrf/ssrf/</link><pubDate>Mon, 01 Mar 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/ssrf/ssrf/</guid><description>Server-side request forgery (SSRF) 在本节中，我们将解释 server-side request forgery（服务端请求伪造）是什么，并描述一些常见的示例，以及解释如何发现和利用各种 SSRF 漏洞。 SSRF 是什么 SSRF 服</description></item><item><title>Blind SSRF</title><link>https://rifewang.github.io/translation/web-security/ssrf/blind-ssrf/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/ssrf/blind-ssrf/</guid><description>Blind SSRF 在本节中，我们将解释什么是不可见的服务端请求伪造，并描述一些常见的不可见 SSRF 示例，以及解释如何发现和利用不可见 SSRF 漏洞。 什么是不可见 SSRF 不可见</description></item><item><title>web 安全之 Directory traversal</title><link>https://rifewang.github.io/translation/web-security/directory-traversal/directory-traversal/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/directory-traversal/directory-traversal/</guid><description>Directory traversal - 目录遍历 在本节中，我们将介绍什么是目录遍历，描述如何执行路径遍历攻击和绕过常见障碍，并阐明如何防止路径遍历漏洞。 什么是目录遍历？ 目录遍</description></item><item><title>web 安全之 CORS</title><link>https://rifewang.github.io/translation/web-security/cors/cors/</link><pubDate>Sun, 28 Feb 2021 01:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/cors/cors/</guid><description>Cross-origin resource sharing (CORS) 在本节中，我们将解释什么是跨域资源共享（CORS），并描述一些基于 CORS 的常见攻击示例，以及讨论如何防御这些攻击。 CORS（跨域资源共享</description></item><item><title>CORS 和 Access-Control-Allow-Origin 响应头</title><link>https://rifewang.github.io/translation/web-security/cors/access-control-allow-origin/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/cors/access-control-allow-origin/</guid><description>CORS 和 Access-Control-Allow-Origin 响应头 在本节中，我们将解释有关 CORS 的 Access-Control-Allow-Origin 响应头，以及后者如何构成 CORS 实现的一部分。 CORS 通过使用一组 HTTP 头部提供了同源策略的可控制放宽，浏览器允许</description></item><item><title>Same-origin policy (SOP)</title><link>https://rifewang.github.io/translation/web-security/cors/same-origin-policy/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/translation/web-security/cors/same-origin-policy/</guid><description>Same-origin policy (SOP) - 同源策略 在本节中，我们将解释什么是同源策略以及它是如何实现的。 什么是同源策略？ 同源策略是一种旨在防止网站互相攻击的 web 浏览器的安全机制</description></item></channel></rss>