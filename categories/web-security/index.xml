<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Web Security - Category - 凌虚 Blog</title><link>https://rifewang.github.io/categories/web-security/</link><description>Web Security - Category - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Thu, 12 Aug 2021 10:58:20 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/web-security/" rel="self" type="application/rss+xml"/><item><title>web 安全系列文章【译文】</title><link>https://rifewang.github.io/web-security/</link><pubDate>Thu, 12 Aug 2021 10:58:20 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/web-security/</guid><description><![CDATA[<h2 id="cross-site-request-forgery-csrf">Cross-site request forgery (CSRF)</h2>
<ul>
<li><a href="/translation/web-security/csrf/csrf/" rel="">CSRF</a></li>
<li><a href="/translation/web-security/csrf/xss-vs-csrf/" rel="">XSS vs CSRF</a></li>
<li><a href="/translation/web-security/csrf/csrf-tokens/" rel="">CSRF tokens</a></li>
<li><a href="/translation/web-security/csrf/samesite-cookies/" rel="">SameSite cookies</a></li>
</ul>
<h2 id="clickjacking-ui-redressing">Clickjacking (UI redressing)</h2>
<ul>
<li><a href="/translation/web-security/clickjacking/clickjacking/" rel="">Clickjacking (UI redressing)</a></li>
</ul>
<h2 id="cross-origin-resource-sharing-cors">Cross-origin resource sharing (CORS)</h2>
<ul>
<li><a href="/translation/web-security/cors/cors/" rel="">CORS</a></li>
<li><a href="/translation/web-security/cors/same-origin-policy/" rel="">Same-origin policy (SOP)</a></li>
<li><a href="/translation/web-security/cors/access-control-allow-origin/" rel="">Access-control-allow-origin</a></li>
</ul>
<h2 id="server-side-request-forgery-ssrf">Server-side request forgery (SSRF)</h2>
<ul>
<li><a href="/translation/web-security/ssrf/ssrf/" rel="">Server-side request forgery (SSRF)</a></li>
<li><a href="/translation/web-security/ssrf/blind-ssrf/" rel="">Blind SSRF vulnerabilities</a></li>
</ul>
<h2 id="http-request-smuggling">HTTP request smuggling</h2>
<ul>
<li><a href="/translation/web-security/request-smuggling/http-request-smuggling/" rel="">HTTP request smuggling</a></li>
<li><a href="/translation/web-security/request-smuggling/finding-request-smuggling/" rel="">Finding HTTP request smuggling vulnerabilities</a></li>
<li><a href="/translation/web-security/request-smuggling/exploiting-request-smuggling/" rel="">Exploiting HTTP request smuggling vulnerabilities</a></li>
</ul>
<h2 id="os-command-injectionn">OS command injectionn</h2>
<ul>
<li><a href="/translation/web-security/command-injection/os-command-injection/" rel="">OS command injection</a></li>
</ul>
<h2 id="server-side-template-injection">Server-side template injection</h2>
<ul>
<li><a href="/translation/web-security/server-side-template-injection/server-side-template-injection/" rel="">Server-side template injection</a></li>
<li><a href="/translation/web-security/server-side-template-injection/exploiting-server-side-template-injection-vulnerabilities/" rel="">Exploiting server-side template injection vulnerabilities</a></li>
</ul>
<h2 id="directory-traversal">Directory traversal</h2>
<ul>
<li><a href="/translation/web-security/directory-traversal/directory-traversal/" rel="">Directory traversal</a></li>
</ul>
<h2 id="dom-based-vulnerabilities">DOM-based vulnerabilities</h2>
<ul>
<li><a href="/translation/web-security/dom-based/dom-based-vulnerabilities/" rel="">DOM-based vulnerabilities</a></li>
<li><a href="/translation/web-security/dom-based/dom-clobbering/" rel="">DOM clobbering</a></li>
</ul>
<h2 id="http-host-header-attacks">HTTP Host header attacks</h2>
<ul>
<li><a href="/translation/web-security/http-host-header-attacks/http-host-header-attacks/" rel="">HTTP Host header attacks</a></li>
<li><a href="/translation/web-security/http-host-header-attacks/exploiting-http-host-header-vulnerabilities/" rel="">Exploiting HTTP Host header vulnerabilities</a></li>
<li><a href="/translation/web-security/http-host-header-attacks/password-reset-poisoning/" rel="">Password reset poisoning</a></li>
</ul>]]></description></item><item><title>web 安全之 Server-side template injection</title><link>https://rifewang.github.io/translation/web-security/server-side-template-injection/server-side-template-injection/</link><pubDate>Wed, 10 Mar 2021 01:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/server-side-template-injection/server-side-template-injection/</guid><description><![CDATA[<h1 id="server-side-template-injection">Server-side template injection</h1>
<p>在本节中，我们将介绍什么是服务端模板注入，并概述利用此漏洞的基本方法，同时也将提供一些避免此漏洞的建议。</p>
<h2 id="什么是服务端模板注入">什么是服务端模板注入</h2>
<p>服务端模板注入是指攻击者能够利用模板自身语法将恶意负载注入模板，然后在服务端执行。</p>]]></description></item><item><title>Exploiting server-side template injection vulnerabilities</title><link>https://rifewang.github.io/translation/web-security/server-side-template-injection/exploiting-server-side-template-injection-vulnerabilities/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/server-side-template-injection/exploiting-server-side-template-injection-vulnerabilities/</guid><description>&lt;h1 id="利用服务端模板注入漏洞">利用服务端模板注入漏洞&lt;/h1>
&lt;p>在本节中，我们将更仔细地了解一些典型的服务端模板注入漏洞，并演示如何利用之前归纳的方法。通过付诸实践，你可以潜在地发现和利用各种不同的服务端模板注入漏洞。&lt;/p></description></item><item><title>web 安全之 CSRF</title><link>https://rifewang.github.io/translation/web-security/csrf/csrf/</link><pubDate>Tue, 09 Mar 2021 01:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/csrf/csrf/</guid><description><![CDATA[<h1 id="cross-site-request-forgery-csrf">Cross-site request forgery (CSRF)</h1>
<p>在本节中，我们将解释什么是跨站请求伪造，并描述一些常见的 <code>CSRF</code> 漏洞示例，同时说明如何防御 <code>CSRF</code> 攻击。</p>
<h2 id="什么是-csrf">什么是 CSRF</h2>
<p>跨站请求伪造（<code>CSRF</code>）是一种 web 安全漏洞，它允许攻击者诱使用户执行他们不想执行的操作。攻击者进行 <code>CSRF</code> 能够部分规避同源策略。</p>]]></description></item><item><title>CSRF tokens</title><link>https://rifewang.github.io/translation/web-security/csrf/csrf-tokens/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/csrf/csrf-tokens/</guid><description><![CDATA[<h1 id="csrf-tokens">CSRF tokens</h1>
<p>在本节中，我们将解释什么是 CSRF token，它们是如何防御的 CSRF 攻击，以及如何生成和验证CSRF token 。</p>
<h2 id="什么是-csrf-token">什么是 CSRF token</h2>
<p>CSRF token 是一个唯一的、秘密的、不可预测的值，它由服务端应用程序生成，并以这种方式传输到客户端，使得它包含在客户端发出的后续 HTTP 请求中。当发出后续请求时，服务端应用程序将验证请求是否包含预期的 token ，并在 token 丢失或无效时拒绝该请求。</p>]]></description></item><item><title>SameSite cookies</title><link>https://rifewang.github.io/translation/web-security/csrf/samesite-cookies/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/csrf/samesite-cookies/</guid><description><![CDATA[<h1 id="samesite-cookies">SameSite cookies</h1>
<p>某些网站使用 SameSite cookies 防御 <code>CSRF</code> 攻击。</p>
<p>这个 <code>SameSite</code> 属性可用于控制是否以及如何在跨站请求中提交 cookie 。通过设置会话 cookie 的属性，应用程序可以防止浏览器默认自动向请求添加 cookie 的行为，而不管cookie 来自何处。</p>]]></description></item><item><title>XSS vs CSRF</title><link>https://rifewang.github.io/translation/web-security/csrf/xss-vs-csrf/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/csrf/xss-vs-csrf/</guid><description><![CDATA[<h1 id="xss-vs-csrf">XSS vs CSRF</h1>
<p>在本节中，我们将解释 <code>XSS</code> 和 <code>CSRF</code> 之间的区别，并讨论 <code>CSRF token</code> 是否有助于防御 <code>XSS</code> 攻击。</p>
<h2 id="xss-和-csrf-之间有啥区别">XSS 和 CSRF 之间有啥区别</h2>
<p>跨站脚本攻击 <code>XSS</code> 允许攻击者在受害者用户的浏览器中执行任意 JavaScript 。</p>]]></description></item><item><title>web 安全之 DOM-based vulnerabilities</title><link>https://rifewang.github.io/translation/web-security/dom-based/dom-based-vulnerabilities/</link><pubDate>Sun, 07 Mar 2021 01:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/dom-based/dom-based-vulnerabilities/</guid><description><![CDATA[<h1 id="dom-based-vulnerabilities">DOM-based vulnerabilities</h1>
<p>在本节中，我们将描述什么是 <code>DOM</code> ，解释对 <code>DOM</code> 数据的不安全处理是如何引入漏洞的，并建议如何在您的网站上防止基于 <code>DOM</code> 的漏洞。</p>
<h2 id="什么是-dom">什么是 DOM</h2>
<p>Document Object Model（<code>DOM</code>）文档对象模型是 web 浏览器对页面上元素的层次表示。网站可以使用 JavaScript 来操作 <code>DOM</code> 的节点和对象，以及它们的属性。<code>DOM</code> 操作本身不是问题，事实上，它也是现代网站中不可或缺的一部分。然而，不安全地处理数据的 JavaScript 可能会引发各种攻击。当网站包含的 JavaScript 接受攻击者可控制的值（称为 source 源）并将其传递给一个危险函数（称为 sink 接收器）时，就会出现基于 <code>DOM</code> 的漏洞。</p>]]></description></item><item><title>DOM clobbering</title><link>https://rifewang.github.io/translation/web-security/dom-based/dom-clobbering/</link><pubDate>Sun, 07 Mar 2021 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/dom-based/dom-clobbering/</guid><description><![CDATA[<h1 id="dom-clobbering">DOM clobbering</h1>
<p>在本节中，我们将描述什么是 DOM clobbing ，演示如何使用 clobbing 技术来利用 DOM 漏洞，并提出防御 DOM clobbing 攻击的方法。</p>
<h2 id="什么是-dom-clobbering">什么是 DOM clobbering</h2>
<p>DOM clobbering 是一种将 HTML 注入页面以操作 DOM 并最终改变页面上 JavaScript 行为的技术。在无法使用 XSS ，但是可以控制页面上 HTML 白名单属性如 id 或 name 时，DOM clobbering 就特别有用。DOM clobbering 最常见的形式是使用 anchor 元素覆盖全局变量，然后该变量将会被应用程序以不安全的方式使用，例如生成动态脚本 URL 。</p>]]></description></item><item><title>web 安全之 HTTP Host header attacks</title><link>https://rifewang.github.io/translation/web-security/http-host-header-attacks/http-host-header-attacks/</link><pubDate>Sat, 06 Mar 2021 01:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/translation/web-security/http-host-header-attacks/http-host-header-attacks/</guid><description>&lt;h1 id="http-host-header-attacks">HTTP Host header attacks&lt;/h1>
&lt;p>在本节中，我们将讨论错误的配置和有缺陷的业务逻辑如何通过 HTTP Host 头使网站遭受各种攻击。我们将概述识别易受 HTTP Host 头攻击的网站的高级方法，并演示如何利用此方法。最后，我们将提供一些有关如何保护自己网站的一般建议。&lt;/p></description></item></channel></rss>