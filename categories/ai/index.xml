<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>AI - Category - 凌虚 Blog</title><link>https://rifewang.github.io/categories/ai/</link><description>AI - Category - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Thu, 28 Nov 2024 12:02:09 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/ai/" rel="self" type="application/rss+xml"/><item><title>AI 声音：数字音频、语音识别、TTS 简介与使用示例</title><link>https://rifewang.github.io/audio-asr-tts/</link><pubDate>Thu, 28 Nov 2024 12:02:09 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/audio-asr-tts/</guid><description><![CDATA[<p>在现代 AI 技术的推动下，声音处理领域取得了巨大进展。从语音识别（<code>ASR</code>）到文本转语音（<code>TTS</code>），再到个性化声音克隆，这些技术已经深入到我们的日常生活中：语音助手、自动字幕生成、语音导航等应用无处不在。</p>]]></description></item><item><title>Web 端语音对话 AI 示例：使用 Whisper 和 llama.cpp 构建语音聊天机器人</title><link>https://rifewang.github.io/web-voice-chat-llm/</link><pubDate>Sun, 24 Nov 2024 16:32:58 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/web-voice-chat-llm/</guid><description><![CDATA[<p>大语言模型（<code>LLM</code>）为基于文本的对话提供了强大的能力。那么，能否进一步扩展，将其转化为语音对话的形式呢？本文将展示如何使用 <code>Whisper</code> 语音识别和 <code>llama.cpp</code> 构建一个 Web 端语音聊天机器人。</p>]]></description></item><item><title>RAG 示例：使用 langchain、Redis、llama.cpp 构建一个 kubernetes 知识库问答</title><link>https://rifewang.github.io/rag-langchain-redis-llamacpp/</link><pubDate>Tue, 19 Nov 2024 16:22:09 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/rag-langchain-redis-llamacpp/</guid><description><![CDATA[<p><code>RAG</code>（<code>Retrieval Augmented Generation</code> 检索增强生成）是目前业界中的一种主流方法，通过增加额外知识的方式来减少大语言模型（<code>LLM</code>）的幻觉问题（一本正经的胡说八道）。</p>]]></description></item><item><title>如果自建 ChatGPT，我会如何从 Model、Inference runtime 构建整个系统</title><link>https://rifewang.github.io/build-my-chatgpt/</link><pubDate>Fri, 25 Oct 2024 20:06:12 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/build-my-chatgpt/</guid><description><![CDATA[<p>ChatGPT 是一个基于 <code>LLM</code> 的对话系统。本文将介绍如何构建一个类似 ChatGPT 的系统，包括从模型、推理引擎到整体架构的构建过程。</p>
<h2 id="系统概览">系统概览</h2>
<p>让我们关注最核心的对话部分。</p>
<p></p>]]></description></item><item><title>以翻译 Kubernetes 文档为例，探索 AI 模型 Fine-Tuning 微调</title><link>https://rifewang.github.io/fine-tuning-for-translation/</link><pubDate>Thu, 24 Oct 2024 22:05:38 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/fine-tuning-for-translation/</guid><description><![CDATA[<p>在现在的 <code>AI</code> 领域，<code>Fine-Tuning</code>（微调）是一种常见且有效的方法，通过对已经训练好的模型进行特定任务的微调，可以使模型在特定场景下表现得更加出色和符合需求。在这篇文章中，我将以 <code>Kubernetes</code> 文档的英译中为背景，分享我进行 <code>Fine-Tuning</code> 的探索过程。</p>]]></description></item><item><title>只想简单跑个 AI 大模型，却发现并不简单</title><link>https://rifewang.github.io/first-run-of-ai-model/</link><pubDate>Thu, 17 Oct 2024 18:30:26 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/first-run-of-ai-model/</guid><description><![CDATA[<p>之前我用 <code>Ollama</code> 在本地跑大语言模型（可以参考<code>《AI LLM 利器 Ollama 架构和对话处理流程解析》</code>）。这次想再捣鼓点进阶操作，比如 <code>fine-tuning</code>。</p>
<p>我的想法是：既然有现成的大模型，为什么不自己整理些特定领域的数据集，给模型“加点料”呢？这样最后就能得到一个针对特定领域优化过的模型了。</p>]]></description></item><item><title>AI LLM 利器 Ollama 架构和对话处理流程解析</title><link>https://rifewang.github.io/ollama/</link><pubDate>Tue, 15 Oct 2024 14:22:02 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/ollama/</guid><description><![CDATA[<h2 id="ollama-概述">Ollama 概述</h2>
<p><code>Ollama</code> 是一个快速运行 <code>LLM</code>（Large Language Models，大语言模型）的简便工具。通过 <code>Ollama</code>，用户无需复杂的环境配置，即可轻松与大语言模型对话互动。</p>]]></description></item></channel></rss>