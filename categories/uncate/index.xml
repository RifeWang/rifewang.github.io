<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Uncate - Category - 凌虚 Blog</title><link>https://rifewang.github.io/categories/uncate/</link><description>Uncate - Category - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Mon, 23 Dec 2019 00:00:00 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/uncate/" rel="self" type="application/rss+xml"/><item><title>GitHub Actions 指南</title><link>https://rifewang.github.io/github-actions/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/github-actions/</guid><description>GitHub Actions 指南 GitHub Actions 使你可以直接在你的 GitHub 库中创建自定义的工作流，工作流指的就是自动化的流程，比如构建、测试、打包、发布、部署等等，也就是说你可以直接</description></item><item><title>给你的库加上酷炫的小徽章</title><link>https://rifewang.github.io/ava-codecov-travis/</link><pubDate>Sat, 21 Dec 2019 13:36:00 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/ava-codecov-travis/</guid><description>给库加上酷炫的小徽章 &amp;amp; ava、codecov、travis 示例 GitHub 很多开源库都会有几个酷炫的小徽章，比如： 这些是怎么加上去的呢？ Shields.io 首先这些徽章</description></item><item><title>使用 Makefile 构建指令集</title><link>https://rifewang.github.io/makefile/</link><pubDate>Sun, 15 Dec 2019 13:39:47 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/makefile/</guid><description>使用 Makefile 构建指令集 make 是一个历史悠久的构建工具，通过配置 Makefile 文件就可以很方便的使用你自己自定义的各种指令集，且与具体的编程语言无关。 例如配置如下的</description></item><item><title>实现 memcached 客户端：TCP、连接池、一致性哈希、自定义协议</title><link>https://rifewang.github.io/create-memcached-client/</link><pubDate>Mon, 09 Dec 2019 13:41:38 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/create-memcached-client/</guid><description>实现 memcached 客户端：TCP、连接池、一致性哈希、自定义协议。 废话不多说，文本将带你实现一个简单的 memcached 客户端。 集群：一致性哈希 memcached 本身并不支持集群，为了</description></item><item><title>CPU 密集型任务会阻塞 Node.js 吗【译】</title><link>https://rifewang.github.io/nodejs-thread-block/</link><pubDate>Tue, 24 Sep 2019 17:19:31 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/nodejs-thread-block/</guid><description>本文翻译自： https://betterprogramming.pub/is-node-js-really-single-threaded-7ea59bcc8d64 CPU密集型任务会阻塞 Node.js 吗？ 让我们使用加密任务做个简单测试： 如图所示，连续执行四次加密任务，打印耗时，结果会发生什么？ 结果输出</description></item><item><title>Let's Encrypt 配置 HTTPS 免费泛域名证书</title><link>https://rifewang.github.io/lets-encrypt/</link><pubDate>Thu, 27 Jun 2019 16:26:45 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/lets-encrypt/</guid><description>想要使用 HTTPS ，你必须先拥有权威 CA（证书签发机构）签发的证书（对于自签名的证书，浏览器是不认账的）。Let&amp;rsquo;s Encrypt 就是一家权威的 CA 证</description></item><item><title>深入理解 Node.js 事件循环架构【译】</title><link>https://rifewang.github.io/nodejs-event-loop-architecture/</link><pubDate>Tue, 28 May 2019 15:53:48 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/nodejs-event-loop-architecture/</guid><description>本文翻译自： https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4 关于 Node.js ，相信你已经了解过不少内容，诸如 Node.js 内核、事件循环、单线程、setTimeout 或 setImmediate 函数的执行机制等等。 当然最重要的，你应</description></item><item><title>使用 Puppeteer 构建自动化端到端测试</title><link>https://rifewang.github.io/puppeteer/</link><pubDate>Fri, 22 Mar 2019 15:04:16 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/puppeteer/</guid><description>端到端测试指的是将系统作为一个黑盒，模拟正常用户行为，跨越从前端到后端整个软件系统，是一种全局性的整体测试。 来看本文的示例： There should have been a video here but</description></item><item><title>图像相似性：哈希和特征</title><link>https://rifewang.github.io/image-similarity/</link><pubDate>Thu, 14 Mar 2019 15:15:10 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/image-similarity/</guid><description>引言 如何判断图像的相似性？ 直接比较图像内容的 md5 值肯定是不行的，md5 的方式只能判断像素级别完全一致。图像的基本单元是像素，如果两张图像完全相</description></item><item><title>图像处理基础</title><link>https://rifewang.github.io/image-processing/</link><pubDate>Tue, 26 Feb 2019 14:51:44 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/image-processing/</guid><description>图像处理基础 现如今我们每时每刻都在与图像打交道，而图像处理也是我们绕不开的问题，本文将会简述图像处理的基础知识以及对常见的裁剪、画布、水印、</description></item></channel></rss>