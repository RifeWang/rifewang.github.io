<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>系统架构 - Category - 凌虚 Blog</title><link>https://rifewang.github.io/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link><description>系统架构 - Category - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Sat, 14 Dec 2024 16:23:07 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/" rel="self" type="application/rss+xml"/><item><title>系统组件优化的思考框架</title><link>https://rifewang.github.io/component-optimize/</link><pubDate>Sat, 14 Dec 2024 16:23:07 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/component-optimize/</guid><description><![CDATA[<p>我之前的文章里有分享过自己总结的做技术选型的思考框架，本文将会分享一下我总结的做系统组件调优/优化的思考框架。</p>
<h2 id="组件优化的思考框架">组件优化的思考框架</h2>
<p>常见的互联网架构基本离不开数据库、缓存、消息队列、搜索、数据处理等等各种组件，虽然组件的形态不一、功能不同，但是我仍然把对他们的优化总结归纳为了以下几点：</p>]]></description></item><item><title>构建自己的框架去做技术选型</title><link>https://rifewang.github.io/technology-selection/</link><pubDate>Thu, 21 Nov 2024 20:20:56 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/technology-selection/</guid><description>&lt;p>技术选型无处不在，你可能需要选择一种类库、选择一个框架、选择一种语言、选择一种组件、选择一个架构模式、选择一种系统方案……。
那么如何构建一个决策或思维框架去做技术选型呢？&lt;/p></description></item><item><title>DDIA 分布式数据的分区与复制 - 基于 Redis、Kafka、Elasticsearch 的深入分析</title><link>https://rifewang.github.io/ddia-partition-replication-redis-kafka-es/</link><pubDate>Thu, 22 Aug 2024 15:05:53 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/ddia-partition-replication-redis-kafka-es/</guid><description><![CDATA[<h2 id="引言">引言</h2>
<p>本文基于《Designing Data-Intensive Applications》一书（设计数据密集型应用，简称 <code>DDIA</code>），深入探讨了 <code>Redis</code>、<code>Kafka</code> 和 <code>Elasticsearch</code> 等常用组件的分区与复制机制。通过这些案例分析，我们可以更好地理解分布式系统的基本原理和实际应用。</p>]]></description></item><item><title>典型系统架构的百万并发理论分析</title><link>https://rifewang.github.io/million-qps-system/</link><pubDate>Thu, 15 Aug 2024 17:06:40 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/million-qps-system/</guid><description><![CDATA[<h2 id="引言">引言</h2>
<p>本文将会描述一个典型的系统架构，然后分析其在理论上是否能够支撑百万并发的请求。</p>
<h2 id="典型系统架构及分析">典型系统架构及分析</h2>
<p>为了降低复杂性，笔者将系统简化为了下图所示：</p>
<p></p>]]></description></item></channel></rss>