<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Engineering on 凌虚 Blog</title><link>https://rifewang.github.io/categories/engineering/</link><description>Recent content in Engineering on 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>又拍图片管家亿级图像之搜图系统的两代演进及底层原理</title><link>https://rifewang.github.io/posts/engineering/image-search-total/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/posts/engineering/image-search-total/</guid><description>又拍图片管家亿级图像之搜图系统的两代演进及底层原理 Link to heading 前言 Link to heading 又拍图片管家当前服务了千万级用户，管理了百亿级图片。当用户的图库变得越来越庞大时，业务上急切的需要一种方案能够快速定位图像，即直接输入图像，然后根据输入的图像内容来找到图库中的原图及相似图，而以图搜图服务就是为了解决这个问题。
本人于在职期间独立负责并实施了整个以图搜图系统从技术调研、到设计验证、以及最后工程实现的全过程。而整个以图搜图服务也是经历了两次的整体演进：从 2019 年初开始第一次技术调研，经历春节假期，2019 年 3、4 月份第一代系统整体上线；2020 年初着手升级方案调研，经历春节及疫情，2020 年 4 月份开始第二代系统的整体升级。
本文将会简述两代搜图系统背后的技术选型及基本原理。
基础概要 Link to heading 图像是什么？ Link to heading 与图像打交道，我们必须要先知道：图像是什么？
答案：像素点的集合。
比如：
左图红色圈中的部分其实就是右图中一系列的像素点。
再举例：
假设上图红色圈的部分是一幅图像，其中每一个独立的小方格就是一个像素点（简称像素），像素是最基本的信息单元，而这幅图像的大小就是 11 x 11 px 。
图像的数学表示 Link to heading 每个图像都可以很自然的用矩阵来表示，每个像素点对应的就是矩阵中的一个元素。
二值图像 Link to heading 二值图像的像素点只有黑白两种情况，因此每个像素点可以由 0 和 1 来表示。
比如一张 4 * 4 二值图像：
0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 0 RGB 图像 Link to heading 红（Red）、绿（Green）、蓝（Blue）作为三原色可以调和成任意的颜色，对于 RGB 图像，每个像素点包含 RGB 共三个通道的基本信息，类似的，如果每个通道用 8 bit 表示即 256 级灰度，那么一个像素点可以表示为：</description></item><item><title>以图搜图系统工程实践</title><link>https://rifewang.github.io/posts/engineering/image-search-system2/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/posts/engineering/image-search-system2/</guid><description>以图搜图系统工程实践 Link to heading 之前写过一篇概述: 以图搜图系统概述 。
以图搜图系统需要解决的主要问题是：
提取图像特征向量（用特征向量去表示一幅图像） 特征向量的相似度计算（寻找内容相似的图像） 对应的工程实践，具体为：
卷积神经网络 CNN 提取图像特征 向量搜索引擎 Milvus CNN Link to heading 使用卷积神经网路 CNN 去提取图像特征是一种主流的方案，具体的模型则可以使用 VGG16 ，技术实现上则使用 Keras + TensorFlow ，参考 Keras 官方示例：
from keras.applications.vgg16 import VGG16 from keras.preprocessing import image from keras.applications.vgg16 import preprocess_input import numpy as np model = VGG16(weights=&amp;#39;imagenet&amp;#39;, include_top=False) img_path = &amp;#39;elephant.jpg&amp;#39; img = image.load_img(img_path, target_size=(224, 224)) x = image.img_to_array(img) x = np.expand_dims(x, axis=0) x = preprocess_input(x) features = model.</description></item><item><title>以图搜图系统概述</title><link>https://rifewang.github.io/posts/engineering/image-search-system/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0800</pubDate><guid>https://rifewang.github.io/posts/engineering/image-search-system/</guid><description>以图搜图系统概述 Link to heading 以图搜图指的是根据图像内容搜索出相似内容的图像。
构建一个以图搜图系统需要解决两个最关键的问题：首先，提取图像特征；其次，特征数据搜索引擎，即特征数据构建成数据库并提供相似性搜索的功能。
图像特征表示 Link to heading 介绍三种方式。
图像哈希 Link to heading 图像通过一系列的变换和处理最终得到的一组哈希值称之为图像的哈希值，而中间的变换和处理过程则称之为哈希算法。
图像的哈希值是对这张图像的整体抽象表示。
比如 Average Hash 算法的计算过程： Reduce size : 将原图压缩到 8 x 8 即 64 像素大小，忽略细节。 Reduce color : 灰度处理得到 64 级灰度图像。 Average the colors : 计算 64 级灰度均值。 Compute the bits : 二值化处理，将每个像素与上一步均值比较并分别记为 0 或者 1 。 Construct the hash : 根据上一步结果矩阵构成一个 64 bit 整数，比如按照从左到右、从上到下的顺序。最后得到的就是图像的均值哈希值。 参考：http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html
图像哈希算法有很多种，包含但不限于:
AverageHash : 也叫 Different Hash PHash : Perceptual Hash MarrHildrethHash : Marr-Hildreth Operator Based Hash RadialVarianceHash : Image hash based on Radon transform BlockMeanHash : Image hash based on block mean ColorMomentHash : Image hash based on color moments 我们最常见可能就是 PHash 。</description></item></channel></rss>