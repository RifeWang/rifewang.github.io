<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>InfluxDB - Category - 凌虚 Blog</title><link>https://rifewang.github.io/categories/influxdb/</link><description>InfluxDB - Category - 凌虚 Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)</copyright><lastBuildDate>Sun, 17 Nov 2019 13:43:48 +0800</lastBuildDate><atom:link href="https://rifewang.github.io/categories/influxdb/" rel="self" type="application/rss+xml"/><item><title>时序数据库 InfluxDB（七）</title><link>https://rifewang.github.io/7/</link><pubDate>Sun, 17 Nov 2019 13:43:48 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/7/</guid><description><![CDATA[<hr>
<h1 id="单点故障和容灾备份">单点故障和容灾备份</h1>
<hr>
<p>InfluxDB 开源的社区版本面临的最大的问题就是单点故障和容灾备份，有没有一个简单的方案去解决这个问题呢？</p>
<p>既然有单点故障的可能，那么索性写入多个节点，同时也解决了容灾备份的问题：</p>]]></description></item><item><title>时序数据库 InfluxDB（六）</title><link>https://rifewang.github.io/6/</link><pubDate>Wed, 06 Nov 2019 13:36:39 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/6/</guid><description><![CDATA[<hr>
<h1 id="cq-连续查询">CQ 连续查询</h1>
<hr>
<p>连续查询 Continuous Queries（ CQ ）是 InfluxDB 很重要的一项功能，它的作用是在 InfluxDB 数据库内部自动定期的执行查询，然后将查询结果存储到指定的 measurement 里。</p>
<p>配置文件中的相关配置：</p>]]></description></item><item><title>时序数据库 InfluxDB（五）</title><link>https://rifewang.github.io/5/</link><pubDate>Wed, 30 Oct 2019 13:33:30 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/5/</guid><description><![CDATA[<hr>
<h1 id="系统监控">系统监控</h1>
<hr>
<p>InfluxDB 自带有一个监控系统，默认情况下此功能是开启的，每隔 10 秒中采集一次系统数据并把数据写入到 _internal 数据库中，其默认使用名称为 monitor 的 RP（数据保留 7 天），相关配置见配置文件中的：</p>]]></description></item><item><title>时序数据库 InfluxDB（四）</title><link>https://rifewang.github.io/4/</link><pubDate>Mon, 28 Oct 2019 13:27:36 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/4/</guid><description><![CDATA[<hr>
<h1 id="存储引擎">存储引擎</h1>
<hr>
<p>InfluxDB 数据的写入如下图所示：</p>
<p></p>
<p>所有数据先写入到 WAL（ Write Ahead Log ）预写日志文件，并同步到 Cache 缓存中，当 Cache 缓存的数据达到了一定的大小，或者达到一定的时间间隔之后，数据会被写入到 TSM 文件中。</p>]]></description></item><item><title>时序数据库 InfluxDB（三）</title><link>https://rifewang.github.io/3/</link><pubDate>Sun, 27 Oct 2019 13:25:48 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/3/</guid><description><![CDATA[<hr>
<h3 id="数据类型">数据类型</h3>
<hr>
<p>InfluxDB 是一个无结构模式，这也就是说你无需事先定义好表以及表的数据结构。</p>
<p>InfluxDB 支持的数据类型非常简单：</p>
<ul>
<li>measurement : string</li>
<li>tag key : string</li>
<li>tag value : string</li>
<li>field key : string</li>
<li>field value : string , float , interger , boolean</li>
</ul>
<p>你可以看到除了 field value 支持的数据类型多一点之外，其余全是字符串类型。</p>]]></description></item><item><title>时序数据库 InfluxDB（二）</title><link>https://rifewang.github.io/2/</link><pubDate>Sat, 26 Oct 2019 13:14:35 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/2/</guid><description><![CDATA[<hr>
<h4 id="rp">RP</h4>
<hr>
<p>先回顾一下 RP 策略（ retention policy ），它由三个部分构成：</p>
<ul>
<li>DURATION：数据的保留时长。</li>
<li>REPLICATION：集群模式下数据的副本数，单节点无效。</li>
<li>SHARD DURATION：可选项，shard group 划分的时间范围。</li>
</ul>
<p>前两个部分没啥好说的，而 shard duration 和 shard group 的概念你可能会感到比较陌生。</p>]]></description></item><item><title>时序数据库 InfluxDB（一）</title><link>https://rifewang.github.io/1/</link><pubDate>Fri, 25 Oct 2019 13:02:58 +0800</pubDate><author>凌虚</author><guid>https://rifewang.github.io/1/</guid><description>&lt;hr>
&lt;p>数据库种类有很多，比如传统的关系型数据库 RDBMS（ 如 MySQL ），NoSQL  数据库（ 如 MongoDB ），Key-Value 类型（ 如 redis ），Wide column 类型（ 如 HBase ）等等等等，当然还有本系列文章将会介绍的时序数据库 TSDB（ 如 InfluxDB ）。&lt;/p></description></item></channel></rss>